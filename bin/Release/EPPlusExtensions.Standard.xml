<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EPPlusExtensions.Standard</name>
    </assembly>
    <members>
        <member name="T:EPPlusExtensions.Attributes.DisplayExcelColumnNameAttribute">
            <summary>
            excel上的标题列
            </summary>
        </member>
        <member name="T:EPPlusExtensions.Attributes.EnumUndefinedAttribute">
            <summary>
            枚举值未定义
            </summary>
        </member>
        <member name="T:EPPlusExtensions.Attributes.ExcelColumnIndexAttribute">
            <summary>
            Excel的标题列所在的列序号是多少,从1开始
            </summary>
        </member>
        <member name="M:EPPlusExtensions.Attributes.ExcelColumnIndexAttribute.#ctor(System.Int32)">
            <summary>
            从1开始的
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:EPPlusExtensions.Attributes.UniqueAttribute">
            <summary>
            值唯一
            </summary>
        </member>
        <member name="P:EPPlusExtensions.CustomModelType.ICustomersModelType.HasAttribute">
            <summary>
            获得List的时候,有没有Attribute处理
            </summary>
        </member>
        <member name="T:EPPlusExtensions.CustomModelType.KV`2">
            <summary>
            model 的一个类型
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="P:EPPlusExtensions.CustomModelType.KV`2.Key">
            <summary>
            只读的
            </summary>
        </member>
        <member name="P:EPPlusExtensions.CustomModelType.KV`2.Value">
            <summary>
            只读的
            </summary>
        </member>
        <member name="P:EPPlusExtensions.CustomModelType.KV`2.State">
            <summary>
            当前key所需要的额外信息;
            </summary>
        </member>
        <member name="P:EPPlusExtensions.CustomModelType.KV`2.KVSource">
            <summary>
            保存数据的一个变量
            </summary>
        </member>
        <member name="P:EPPlusExtensions.CustomModelType.KV`2.HasAttribute">
            <summary>
            有对应的Attribute要搭配使用
            </summary>
        </member>
        <member name="M:EPPlusExtensions.CustomModelType.KV`2.RunAttribute``1(System.Attribute,System.Reflection.PropertyInfo,``0,System.String)">
            <summary>
            HasAttribute == true 才会调用
            </summary>
            <typeparam name="T"></typeparam>
            <param name="attribute"></param>
            <param name="pInfo"></param>
            <param name="model"></param>
            <param name="value"></param>
        </member>
        <member name="T:EPPlusExtensions.CustomModelType.KVExtensionMethod">
            <summary>
            用扩展方法原因: 1.因为当对象为Null时无法获得,2.类型推断
            </summary>
        </member>
        <member name="T:EPPlusExtensions.CustomModelType.KVSetAttribute">
            <summary>
            给KvSource搭配使用的.
            </summary>
        </member>
        <member name="P:EPPlusExtensions.CustomModelType.KVSetAttribute.MustInSet">
            <summary>
            必须在集合中
            </summary>
        </member>
        <member name="P:EPPlusExtensions.CustomModelType.KVSetAttribute.ErrorMessage">
            <summary>
            自定义的错误消息
            </summary>
        </member>
        <member name="P:EPPlusExtensions.CustomModelType.KVSetAttribute.Args">
            <summary>
            错误消息的参数
            </summary>
        </member>
        <member name="F:EPPlusExtensions.CustomModelType.KVSetAttribute.KVSource">
            <summary>
            Key是属性名字,Value是该属性的类型的 KVSource&lt;TKey,TValue&gt;
            </summary>
        </member>
        <member name="P:EPPlusExtensions.DefaultConfig.WorkSheetName">
            <summary>
            工作簿名字
            </summary>
        </member>
        <member name="P:EPPlusExtensions.DefaultConfig.CrateDataTableSnippe">
            <summary>
            代码片段-创建DataTable
            </summary>
        </member>
        <member name="P:EPPlusExtensions.DefaultConfig.CrateClassSnippe">
            <summary>
            代码片段-创建类的
            </summary>
        </member>
        <member name="P:EPPlusExtensions.DefaultConfig.ClassPropertyList">
            <summary>
            Class的属性列表
            </summary>
        </member>
        <member name="T:EPPlusExtensions.EPPlusConfig">
            <summary>
            配置信息 
            </summary>
        </member>
        <member name="F:EPPlusExtensions.EPPlusConfig.MaxRow07">
            <summary>
            Maximum number of rows in a worksheet (1048576)
            </summary>
        </member>
        <member name="F:EPPlusExtensions.EPPlusConfig.MaxCol07">
            <summary>
            Maximum number of columns in a worksheet (16384)
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfig.Report">
            <summary>
            报表(excel能折叠的那种)的显示的一些配置
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfig.IsReport">
            <summary>
            标识是否是一个报表格式(excel能折叠的)的Worksheet(目前该属性表示每一个worksheet), 默认False
            </summary>
        </member>
        <member name="F:EPPlusExtensions.EPPlusConfig.DeleteFillDateStartLineWhenDataSourceEmpty">
            <summary>
            当填充的数据源为空时,是否删除填充的起始行,默认false
            </summary>
        </member>
        <member name="F:EPPlusExtensions.EPPlusConfig.UseFundamentals">
            <summary>
            是否使用默认(单元格格式)约定,默认true 注:settingCellFormat 若与默认的发成冲突,会把默认的 cell 格式给覆盖.
            </summary>
        </member>
        <member name="F:EPPlusExtensions.EPPlusConfig.CellFormatDefault">
            <summary>
            默认的单元格格式设置,colMapperName 是配置单元格的名字 譬如 $tb1Id, 那么colMapperName值就为Id
            </summary>
        </member>
        <member name="F:EPPlusExtensions.EPPlusConfig.WorkSheetDefault">
            <summary>
            设置工作簿的一些列宽,行高 等
            </summary>
        </member>
        <member name="T:EPPlusExtensions.EPPlusConfigFixedCells">
            <summary>
            配置信息-固定的单元格
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigFixedCells.ConfigCellList">
            <summary>
            固定单元格信息们
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigFixedCells.CellCustomSetValue">
            <summary>
            自定义设置值 action 3个参数 分别代表 (colName,  cellValue, cell)
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigFixedCells.ConfigItemMustExistInDataColumn">
            <summary>
            填充配置有的列,DataColumn必须存在
            </summary>
        </member>
        <member name="T:EPPlusExtensions.EPPlusConfigFixedCell">
            <summary>
            每一个固定单元格项的配置信息
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigFixedCell.Address">
            <summary>
            单元格地址:如 A8
            不区分大小写,即A2与a2是一样的.建议大写
            对于合并单元格,A2:B2, 返回的也是A2
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigFixedCell.ConfigValue">
            <summary>
            单元格配置的值:如 Name
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigFixedCell.IsMergeCell">
            <summary>
            是否是合并单元格
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigFixedCell.FullAddress">
            <summary>
            完整的address,用来给记录合并单元格的
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigBody.ConfigList">
            <summary>
            所有的配置信息
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigBody.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="nth">第几个配置,从1开始</param>
            <returns></returns>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigBodyConfig.Nth">
            <summary>
            第几个配置, 从1开始
            </summary>
        </member>
        <member name="F:EPPlusExtensions.EPPlusConfigBodyConfig.Option">
            <summary>
            对应的设置
            </summary>
        </member>
        <member name="T:EPPlusExtensions.EPPlusConfigBodyOption">
            <summary>
            设置的详细内容
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigBodyOption.ConfigLine">
            <summary>
            body 的内容配置.
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigBodyOption.ConfigLineInterval">
            <summary>
            配置一共占用了多少列
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigBodyOption.ConfigExtra">
            <summary>
            body中固定的单元格. 譬如汇总信息等.譬如A8,Name
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigBodyOption.CustomSetValue">
            <summary>
            该Action只对ConfigLine有效
            自定义设置值 T1-T4 分别代表 (colName, cellValue, cells, args) 属性名, 属性值, 所在的单元格, 程序内部提供的参数
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigBodyOption.MapperExcelTemplateLine">
            <summary>
            SheetBody模版自带(提供)多少行(根据这个,在结合数据源,程序内部判断是否新增行)
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigBodyOption.SummaryCustomSetValue">
            <summary>
            自定义设置值  
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigBodyOption.ConfigItemMustExistInDataColumn">
            <summary>
            填充配置有的列必须在DataColumn中存在
            </summary>
        </member>
        <member name="T:EPPlusExtensions.CustomValue">
            <summary>
            自定义的值
            </summary>
        </member>
        <member name="P:EPPlusExtensions.CustomValue.ColName">
            <summary>
            属性名:列名 (要填充的列,如姓名)
            </summary>
        </member>
        <member name="P:EPPlusExtensions.CustomValue.Value">
            <summary>
            属性值: 要填充的值 
            </summary>
        </member>
        <member name="P:EPPlusExtensions.CustomValue.Cell">
            <summary>
            重所在的单元格:填充的单元格
            </summary>
        </member>
        <member name="P:EPPlusExtensions.CustomValue.ConfigLine">
            <summary>
            程序内部提供的参数:配置行信息
            </summary>
        </member>
        <member name="P:EPPlusExtensions.CustomValue.ConfigExtra">
            <summary>
            程序内部提供的参数:额外要填充的单元格信息
            </summary>
        </member>
        <member name="P:EPPlusExtensions.CustomValue.Worksheet">
            <summary>
            程序内部提供的参数:填充的工作簿
            </summary>
        </member>
        <member name="P:EPPlusExtensions.CustomValue.Area">
            <summary>
            程序内部提供的参数:填充的区域
            </summary>
        </member>
        <member name="F:EPPlusExtensions.FillArea.TitleExt">
            <summary>
            标题
            </summary>
        </member>
        <member name="F:EPPlusExtensions.FillArea.Content">
            <summary>
            内容(配置的哪些)
            </summary>
        </member>
        <member name="F:EPPlusExtensions.FillArea.ContentExt">
            <summary>
            内容扩展,DataTable 未配置的列)
            </summary>
        </member>
        <member name="P:EPPlusExtensions.InsertRowStyle.Operation">
            <summary>
            插入新增行的操作
            </summary>
        </member>
        <member name="P:EPPlusExtensions.InsertRowStyle.NeedCopyStyles">
            <summary>
            新增行时复制配置项所在行的样式(新增的行不含单元格合并) ,相同的工作簿,该选项 false 时, 生成的文件体积会减小很多
            </summary>
        </member>
        <member name="P:EPPlusExtensions.InsertRowStyle.NeedMergeCell">
            <summary>
            配置行有合并单元格时,新增行也需要
            </summary>
        </member>
        <member name="F:EPPlusExtensions.InsertRowStyleOperation.CopyAll">
            <summary>
            复制配置行的所有样式(含合并单元格)
            </summary>
        </member>
        <member name="F:EPPlusExtensions.InsertRowStyleOperation.CopyStyleAndMergeCell">
            <summary>
            复制配置行的样式,然后合并单元格(如果配置行有)
            </summary>
        </member>
        <member name="T:EPPlusExtensions.EPPlusConfigSource">
            <summary>
            配置信息的数据源
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigSourceFixedCell`1.ConfigValue">
            <summary>
            单元格配置的值:如 Name
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigSourceFixedCell`1.FillValue">
            <summary>
            填写的值:如 张三
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigSourceFixedCell.ConfigValue">
            <summary>
            单元格配置的值:如 Name
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigSourceFixedCell.FillValue">
            <summary>
            填写的值:如 张三
            </summary>
        </member>
        <member name="M:EPPlusExtensions.EPPlusConfigSourceConfigExtras`1.ConvertToConfigExtraList(System.Data.DataTable,System.Data.DataRow)">
            <summary>
            
            </summary>
            <param name="dt">用来获得列名</param>
            <param name="dr">数据源是这个</param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusConfigSourceConfigExtras.ConvertToConfigExtraList(System.Data.DataTable,System.Data.DataRow)">
            <summary>
            
            </summary>
            <param name="dt">用来获得列名</param>
            <param name="dr">数据源是这个</param>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigSourceBody.ConfigList">
            <summary>
            所有的配置信息
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigSourceBody.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="nth">第几个配置,从1开始</param>
            <returns></returns>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigSourceBodyConfig.Nth">
            <summary>
            第几个, 从1开始
            </summary>
        </member>
        <member name="F:EPPlusExtensions.EPPlusConfigSourceBodyConfig.Option">
            <summary>
            对应的设置
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigSourceBodyOption.DataSource">
            <summary>
            数据源, 对应  EPPlusConfig 的 ConfigLine
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigSourceBodyOption.FillMethod">
            <summary>
            填充方式
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigSourceBodyOption.ConfigExtra">
            <summary>
            固定的一些单元格 如表格的汇总栏什么的
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusConfigSourceConfigExtra.Source">
            <summary>
            所有的配置
            </summary>
        </member>
        <member name="F:EPPlusExtensions.EPPlusHelper.FillDataWorkSheetNameList">
            <summary>
            填充Excel时创建的工作簿名字
            </summary>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetExcelWorksheets(OfficeOpenXml.ExcelPackage)">
            <summary>
            获得当前Excel的所有工作簿
            </summary>
            <param name="excelPackage"></param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetExcelWorksheet(OfficeOpenXml.ExcelPackage,System.Int32)">
            <summary>
            获得Excel的第N个Sheet
            </summary>
            <param name="excelPackage"></param>
            <param name="workSheetIndex">从1开始</param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.DuplicateWorkSheetAndRename(OfficeOpenXml.ExcelPackage,System.Int32,System.String)">
            <summary>
            根据workSheetIndex获得模版worksheet,然后复制一份并重命名成workSheetName后返回 
            </summary>
            <param name="excelPackage"></param>
            <param name="copyWorkSheetIndex">从1开始</param>
            <param name="workSheetNewName"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetExcelWorksheet(OfficeOpenXml.ExcelPackage,System.String)">
            <summary>
            根据worksheet名字获得worksheet
            </summary>
            <param name="excelPackage"></param>
            <param name="workName"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetExcelWorksheetNames(OfficeOpenXml.ExcelPackage)">
            <summary>
            获得当前Excel的所有工作簿的名字
            </summary>
            <param name="excelPackage"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetExcelWorksheet(OfficeOpenXml.ExcelPackage,System.String,System.String)">
            <summary>
            根据名字获取Worksheet,然后复制一份出来并重命名成workSheetName并返回 
            </summary>
            <param name="excelPackage"></param>
            <param name="destWorkSheetName"></param>
            <param name="workSheetNewName"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.DeleteWorksheet(OfficeOpenXml.ExcelPackage,System.String)">
            <summary>
             
            </summary>
            <param name="excelPackage"></param>
            <param name="workSheetName"></param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.DeleteWorksheet(OfficeOpenXml.ExcelPackage,System.Int32)">
            <summary>
             尝试删除,如果删除的目标不存在,也不会报错
            </summary>
            <param name="excelPackage"></param>
            <param name="workSheetIndex">从1开始,注:每删除一个ws后,索引重新计算</param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.DeleteWorksheet(OfficeOpenXml.ExcelPackage,OfficeOpenXml.eWorkSheetHidden[])">
            <summary>
            删除工作簿
            </summary>
            <param name="excelPackage"></param>
            <param name="eWorkSheetHiddens">获得工作簿的参数</param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.DeleteWorksheet(OfficeOpenXml.ExcelPackage,System.String[],OfficeOpenXml.eWorkSheetHidden[])">
            <summary>
            删除工作簿
            </summary>
            <param name="excelPackage"></param>
            <param name="workSheetNameExcludes">要保留的工作簿名字</param>
            <param name="eWorkSheetHiddens">获得工作簿的参数</param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.DeleteWorksheet(OfficeOpenXml.ExcelPackage,System.Collections.Generic.List{System.String},OfficeOpenXml.eWorkSheetHidden[])">
            <summary>
            删除工作簿
            </summary>
            <param name="excelPackage"></param>
            <param name="workSheetNameExcludeList">要保留的工作簿名字</param>
            <param name="eWorkSheetHiddens">获得工作簿的参数</param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetWorkSheetNames(OfficeOpenXml.ExcelPackage,OfficeOpenXml.eWorkSheetHidden[])">
            <summary>
            获得excel有哪些工作簿名称
            </summary>
            <param name="excelPackage"></param>
            <param name="eWorkSheetHiddens"> 可以用来获得隐藏的工作簿</param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.DeleteWorksheetAll(OfficeOpenXml.ExcelPackage,System.String[])">
            <summary>
            删除所有的工作簿
            </summary>
            <param name="excelPackage"></param>
            <param name="workSheetNameExclude">排除的工作簿名字列表</param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.DeleteWorksheetAll(OfficeOpenXml.ExcelPackage,System.Collections.Generic.List{System.String})">
            <summary>
            删除所有的工作簿
            </summary>
            <param name="excelPackage"></param>
            <param name="workSheetNameExcludeList">排除的工作簿名字列表</param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.FillData(OfficeOpenXml.ExcelPackage,EPPlusExtensions.EPPlusConfig,EPPlusExtensions.EPPlusConfigSource,System.String,System.String)">
            <summary>
            往目标sheet中填充数据.注:填充的数据的类型会影响你设置的excel单元格的格式是否起作用
            </summary>
            <param name="excelPackage"></param>
            <param name="config"></param>
            <param name="configSource"></param>
            <param name="workSheetNewName">填充数据后的Worksheet叫什么.  </param>
            <param name="destWorkSheetName">填充数据的workSheet叫什么</param> 
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.FillData(OfficeOpenXml.ExcelPackage,EPPlusExtensions.EPPlusConfig,EPPlusExtensions.EPPlusConfigSource,System.String,System.Int32)">
            <summary>
            往目标sheet中填充数据.注:填充的数据的类型会影响你设置的excel单元格的格式是否起作用
            </summary>
            <param name="excelPackage"></param>
            <param name="config"></param>
            <param name="configSource"></param>
            <param name="workSheetNewName">填充数据后的Worksheet叫什么. 若为""/null,则默认是"Sheet" +workSheetNewName </param>
            <param name="destWorkSheetIndex">从1开始</param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.FillData(EPPlusExtensions.EPPlusConfig,EPPlusExtensions.EPPlusConfigSource,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            往目标sheet中填充数据
            </summary>
            <param name="config"></param>
            <param name="configSource"></param>
            <param name="worksheet"></param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.FillData_Body(EPPlusExtensions.EPPlusConfig,EPPlusExtensions.EPPlusConfigSource,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            
            </summary>
            <param name="config"></param>
            <param name="configSource"></param>
            <param name="worksheet"></param>
            <returns>新增了多少行</returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetMergedCellFromRow(OfficeOpenXml.ExcelWorksheet,System.Int32,System.String,System.String)">
            <summary>
            所有的合并单元格
            </summary>
            <param name="worksheet"></param>
            <param name="lineNo">行号</param>
            <param name="leftCol">最左边的</param>
            <param name="rightCol">最右边的,如果最右边的合并单元格,取合并单元格的最右边列的地址</param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetCellFromRow(OfficeOpenXml.ExcelWorksheet,System.Int32,System.String,System.String)">
            <summary>
            所有的单元格
            </summary>
            <param name="worksheet"></param>
            <param name="lineNo">行号</param>
            <param name="leftCol">最左边的</param>
            <param name="rightCol">最右边的,如果最右边的合并单元格,取合并单元格的最右边列的地址</param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.InitFillDataColumnStat(System.Data.DataTable,System.Collections.Generic.List{EPPlusExtensions.EPPlusConfigFixedCell},EPPlusExtensions.SheetBodyFillDataMethod)">
            <summary>
             获得Database数据源的所有的列的使用状态
            </summary>
            <param name="dataTable"></param>
            <param name="configLine"></param>
            <param name="fillModel"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.FillData_Foot(EPPlusExtensions.EPPlusConfig,EPPlusExtensions.EPPlusConfigSource,OfficeOpenXml.ExcelWorksheet,System.Int32)">
            <summary>
            填充foot
            </summary>
            <param name="config"></param>
            <param name="configSource"></param>
            <param name="worksheet"></param>
            <param name="sheetBodyAddRowCount"></param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.SetWorksheetCellsValue(EPPlusExtensions.EPPlusConfig,OfficeOpenXml.ExcelRange,System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="config"></param>
            <param name="cells">s结尾表示单元格有可能是合并单元格</param>
            <param name="val">值</param>
            <param name="colMapperName">excel填充的列名,不想传值请使用null,用来确保填充的数据格式,譬如身份证, 那么单元格必须要是</param> 
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetExcelColumnOfModel(EPPlusExtensions.GetExcelListArgs)">
            <summary>
            从Excel 中获得符合C# 类属性定义的列名集合,内部会修改DataColEnd的值
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.ExtractName(System.String)">
            <summary>
            提取符合c#规范的名字
            </summary>
            <param name="colName"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.SetReport(OfficeOpenXml.ExcelWorksheet,System.Data.DataRow,EPPlusExtensions.EPPlusConfig,System.Int32,System.Int32)">
            <summary>
            设置报表(能折叠行的excel)格式
            </summary>
            <param name="worksheet"></param>
            <param name="row"></param>
            <param name="config"></param>
            <param name="destRow"></param>
            <param name="maxIntervalRow"></param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.FormatAttributeMsg``1(System.String,``0,System.String,System.String,System.String[])">
            <summary>
            格式化Attribute的错误消息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pInfo_Name"></param>
            <param name="model"></param>
            <param name="value"></param>
            <param name="attrErrorMessage"></param>
            <param name="attrArgs"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.SetConfigSourceHead(EPPlusExtensions.EPPlusConfigSource,System.Data.DataTable)">
            <summary>
            设置Head配置的数据源
            </summary>
            <param name="configSource"></param>
            <param name="dt">用来获得列名</param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.SetConfigSourceHead(EPPlusExtensions.EPPlusConfigSource,System.Data.DataTable,System.Data.DataRow)">
            <summary>
            设置Head配置的数据源
            </summary>
            <param name="configSource"></param>
            <param name="dt">用来获得列名</param>
            <param name="dr">数据源是这个</param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.SetConfigSourceFoot(EPPlusExtensions.EPPlusConfigSource,System.Data.DataTable)">
            <summary>
            设置Foot配置的数据源
            </summary>
            <param name="configSource"></param>
            <param name="dt">用来获得列名</param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.SetConfigSourceFoot(EPPlusExtensions.EPPlusConfigSource,System.Data.DataTable,System.Data.DataRow)">
            <summary>
            设置Foot配置的数据源
            </summary>
            <param name="configSource"></param>
            <param name="dt">用来获得列名</param>
            <param name="dr">数据源是这个</param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.InitGetExcelListArgsModel``1">
            <summary>
            初始化参数模型
            无法添加 new() 约束, 因为 datarow 就是没有的
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetList``1(OfficeOpenXml.ExcelWorksheet,System.Int32)">
            <summary>
            只能是最普通的excel.(每个单元格都是未合并的,第一行是列名,数据从第一列开始填充的那种.)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ws"></param>
            <param name="rowIndex">数据起始行(不含列名),从1开始</param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetList``1(OfficeOpenXml.ExcelWorksheet,System.Int32,System.String,System.String)">
            <summary>
            只能是最普通的excel.(第一行是必须是列名,数据填充列起始必须是A2单元格,且每个单元格都是未合并的)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="ws"></param>
            <param name="rowIndex">数据起始行(不含列名),从1开始</param> 
            <param name="everyCellReplaceOldValue"></param>
            <param name="everyCellReplaceNewValue"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetPropName(OfficeOpenXml.ExcelAddress,System.Collections.Generic.Dictionary{OfficeOpenXml.ExcelAddress,System.Int32},System.Collections.Generic.Dictionary{System.Int32,System.String})">
            <summary>
            获得属性名
            </summary>
            <param name="ExcelAddress"></param>
            <param name="dictExcelAddressCol"></param>
            <param name="dictExcelColumnIndexToModelPropName_All"></param>
            <returns>PropName</returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetDataTable(EPPlusExtensions.GetExcelListArgs{System.Data.DataRow})">
            <summary>
            读取excel, 返回一个DataTable
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetMatchingModelExceptionCase_lt(System.Collections.Generic.List{System.String},System.Type,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{EPPlusExtensions.ExcelCellInfo}},OfficeOpenXml.ExcelWorksheet)">
            <summary>
             model的哪些属性是在excel中没有定义的 + model中没有定义 
            </summary>
            <param name="excelColumnIsNotModelProp"></param> 
            <param name="type"></param>
            <param name="colNameToCellInfo"></param>
            <param name="ws"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetMatchingModelExceptionCase_gt(System.Collections.Generic.List{System.String},System.Type,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{EPPlusExtensions.ExcelCellInfo}},OfficeOpenXml.ExcelWorksheet)">
            <summary>
            excel的哪些列是在Model中定义了却没有(即,model中缺少的列) + model中没有定义 
            </summary>
            <param name="modelPropNotExistsExcelColumn"></param> 
            <param name="type"></param>
            <param name="colNameToCellInfo"></param>
            <param name="ws"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.SetDefaultConfigFromExcel(OfficeOpenXml.ExcelPackage,EPPlusExtensions.EPPlusConfig,System.Int32)">
            <summary>
            从Excel中获取默认的配置信息
            </summary>
            <param name="excelPackage"></param>
            <param name="config"></param>
            <param name="workSheetIndex">第几个workSheet作为模版,从1开始</param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.SetDefaultConfigFromExcel(OfficeOpenXml.ExcelPackage,EPPlusExtensions.EPPlusConfig,System.String)">
            <summary>
            
            </summary>
            <param name="excelPackage"></param>
            <param name="config"></param>
            <param name="workSheetName"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.SetConfigBodyFromExcel_OtherPara(EPPlusExtensions.EPPlusConfig,OfficeOpenXml.ExcelWorksheet)">
            <summary>
             这个不能在FillData里面算, 会有问题
            </summary>
            <param name="config"></param>
            <param name="worksheet"></param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.SetSheetCellsValueFromA1(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            让 sheet.Cells.Value 强制从A1单元格开始
            </summary>
            <param name="sheet"></param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetFirstValueCellPoint(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            获得第一个有值的单元格
            </summary>
            <param name="ws"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetFirstValueCellRange(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            获得第一个有值的单元格
            </summary>
            <param name="ws"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetFirstValueCellInfo``1(OfficeOpenXml.ExcelWorksheet)">
            <summary>
            获得第一个有值的单元格
            </summary>
            <typeparam name="TOut"></typeparam>
            <param name="ws"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.SetDefaultConfigFromExcel(EPPlusExtensions.EPPlusConfig,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            设置默认的配置
            </summary>
            <param name="config"></param>
            <param name="sheet"></param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.SetConfigBodyFromExcel(EPPlusExtensions.EPPlusConfig,OfficeOpenXml.ExcelWorksheet)">
            <summary>
            设置sheetBody配置
            </summary>
            <param name="config"></param>
            <param name="sheet"></param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetConfigFromExcel(OfficeOpenXml.ExcelWorksheet,System.String)">
            <summary>
            设置sheetFoot配置
            </summary>
            <param name="sheet"></param>
            <param name="startWith"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.ConvertWorkSheetIndex(OfficeOpenXml.ExcelPackage,System.Int32)">
            <summary>
            将workSheetIndex转换为代码中确切的值
            </summary>
            <param name="excelPackage"></param>
            <param name="workSheetIndex">从1开始</param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetMergeCellAddressPrecise(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32)">
            <summary>
            获得精确的合并单元格地址
            </summary>
            <param name="ws"></param>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.IsMergeCell(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.String@)">
            <summary>
            是不是合并单元格
            </summary>
            <param name="ws"></param>
            <param name="row"></param>
            <param name="col"></param>
            <param name="mergeCellAddress"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetMergeCellText(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32)">
            <summary>
            获得合并单元格的值,如果不是合并单元格, 返回单元格的值
            </summary>
            <param name="ws"></param>
            <param name="row"></param>
            <param name="col"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetCellText(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Boolean)">
            <summary>
            如果是合并单元格,请传入第一个合并单元格的坐标
            </summary>
            <param name="ws"></param>
            <param name="row">从1开始</param>
            <param name="col">从1开始</param>
            <param name="when_TextProperty_NullReferenceException_Use_ValueProperty"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.CheckWorkSheetCellValue(OfficeOpenXml.ExcelWorksheet,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            根据dict检查指定单元格的值是否符合预先定义.
            </summary>
            <param name="ws"></param>
            <param name="dict">k:r1c1, v:具体值</param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.FreezePanes(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32)">
            <summary>
            冻结窗口面板
            </summary>
            <param name="ws"></param>
            <param name="row">冻结[1,Row)行</param>
            <param name="column">冻结{1,Column) 列</param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.FillExcelDefaultConfig(System.String,System.String,System.Collections.Generic.List{EPPlusExtensions.ExcelDataConfigInfo},System.Action{OfficeOpenXml.ExcelRange})">
            <summary>
            
            </summary>
            <param name="filePath"></param>
            <param name="fileOutDirectoryName"></param>
            <param name="dataConfigInfo"></param>
            <param name="cellCustom">对单元格进行额外处理</param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.FillExcelDefaultConfig(OfficeOpenXml.ExcelPackage,System.Collections.Generic.List{EPPlusExtensions.ExcelDataConfigInfo},System.Action{OfficeOpenXml.ExcelRange})">
            <summary>
            
            </summary>
            <param name="excelPackage"></param>
            <param name="dataConfigInfo">指定的worksheet</param>
            <param name="cellCustom">对单元格进行额外处理</param>
            <returns>工作簿Name,DatTable的创建代码</returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetExcelDataConfigInfo(System.Collections.Generic.List{EPPlusExtensions.ExcelDataConfigInfo},System.Int32,System.String,System.Int32@,System.Int32@)">
            <summary>
            返回模版的 titleLine 和 titleColumn
            </summary> 
            <param name="dataConfigInfo"></param>
            <param name="wsIndex"></param>
            <param name="wsName"></param>
            <param name="titleLine"></param>
            <param name="titleColumn"></param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.FillExcelDefaultConfig(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Action{OfficeOpenXml.ExcelRange})">
            <summary>
            填充excel默认配置
            </summary>
            <param name="ws"></param>
            <param name="titleLineNumber"></param>
            <param name="titleColumnNumber"></param>
            <param name="cellCustom">对单元格进行额外处理</param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.AutoRename(System.Collections.Generic.List{System.String},System.Collections.Generic.Dictionary{System.String,System.Int32},System.String,System.Boolean)">
            <summary>
            自动重命名
            </summary>
            <param name="nameList">重名后的name集合</param>
            <param name="nameRepeatCounter">name重复的次数</param>
            <param name="name">要传入的name值</param>
            <param name="renameFirstNameWhenRepeat">当重名时,重命名第一个名字</param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.AutoRename(System.Collections.Generic.List{EPPlusExtensions.ExcelCellInfoValue},System.Collections.Generic.Dictionary{System.String,System.Int32},EPPlusExtensions.ExcelCellInfoValue,System.Boolean)">
            <summary>
            自动重命名
            </summary>
            <param name="nameList">重名后的name集合</param>
            <param name="nameRepeatCounter">name重复的次数</param>
            <param name="name">要传入的name值</param>
            <param name="renameFirstNameWhenRepeat">当重名时,重命名第一个名字</param>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetFillDefaultConfig(System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            获得excel填写的配置内容
            </summary>
            <param name="content"></param>
            <param name="outResultPrefix"></param>
            <param name="alias"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetCellsBy(OfficeOpenXml.ExcelWorksheet,System.String)">
            <summary>
            根据值获的excel中对应的单元格
            </summary>
            <param name="ws"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetCellsBy(OfficeOpenXml.ExcelWorksheet,System.Object[0:,0:],System.Predicate{System.Object})">
            <summary>
            根据值获的excel中对应的单元格
            </summary>
            <param name="ws"></param>
            <param name="cellsValue">一般通过ws.Cells.Value as object[,] 获得 </param>
            <param name="match">示例: a => a != null &amp;&amp; a.GetType() == typeof(string) &amp;&amp; ((string) a == "备注")</param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.ScientificNotationFormatToString(OfficeOpenXml.ExcelPackage,System.String,System.Boolean)">
            <summary>
            科学计数法的cell转成文本格式的cell
            </summary>
            <param name="excelPackage"></param>
            <param name="savePath"></param>
            <param name="containNoMatchCell">包含不匹配的单元格(即把所有的单元格变成文本格式),true:是.false:仅针对显示成科学计数法的cell变成文本</param>
            <returns>是否有进行科学技术法的cell转换.true:是,false:否</returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.ScientificNotationFormatToString(System.String,System.String,System.Boolean)">
            <summary>
            处理Excel,将包含科学计数法的cell转成文本格式的cell
            </summary>
            <param name="fileFullPath">文件路径</param>
            <param name="fileSaveAsPath">文件另存为路径</param>
            <param name="containNoMatchCell">包含不匹配的单元格(即把所有的单元格变成文本格式),true:是.false:仅针对显示成科学计数法的cell变成文本</param>
            <returns>是否有进行科学技术法的cell转换.true:是,false:否</returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetListErrorMsg(System.Action)">
            <summary>
            获得错误消息
            </summary>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetListErrorMsg``1(System.Func{System.Collections.Generic.List{``0}},System.Collections.Generic.List{``0}@)">
            <summary>
            获得错误消息
            </summary>
            <param name="action"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.EachHiddenRow(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Action{OfficeOpenXml.ExcelRow})">
            <summary>
            
            </summary>
            <param name="ws"></param>
            <param name="rowStartIndex">从1开始</param>
            <param name="rowEndIndex">最大值:EPPlusConfig.MaxRow07</param>
            <param name="action">一般用于修改Hidden状态</param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.EachHiddenColumn(OfficeOpenXml.ExcelWorksheet,System.Int32,System.Int32,System.Action{OfficeOpenXml.ExcelRow})">
            <summary>
            
            </summary>
            <param name="ws"></param>
            <param name="columnStartIndex">从1开始</param>
            <param name="columnEndIndex">最大值:EPPlusConfig.MaxCol07</param>
            <param name="action">一般用于修改Hidden状态</param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.EPPlusHelper.GetFileStream(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            读取一个文件,获得一个文件流
            </summary>
            <param name="filePath"></param>
            <param name="mode"></param>
            <param name="access"></param>
            <param name="share"></param>
            <returns></returns>
        </member>
        <member name="P:EPPlusExtensions.EPPlusReport.RowLevelColumnName">
            <summary>
            行折叠的deth(Level)在DataRow中什么列表示.默认:Level
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusReport.Collapsed">
            <summary>
            行是否合并显示
            </summary>
        </member>
        <member name="P:EPPlusExtensions.EPPlusReport.OutLineSummaryBelow">
            <summary>
            合并/展开 行 的折叠符号是否在右边
            </summary>
        </member>
        <member name="T:EPPlusExtensions.ExcelCellInfo">
            <summary>
            单元格信息
            </summary>
        </member>
        <member name="P:EPPlusExtensions.ExcelCellInfoValue.Name">
            <summary>
            符合c#命名规范的名字
            </summary>
        </member>
        <member name="P:EPPlusExtensions.ExcelCellInfoValue.IsRename">
            <summary>
            有没有重命名
            </summary>
        </member>
        <member name="P:EPPlusExtensions.ExcelCellInfoValue.NameNew">
            <summary>
            新的名字
            </summary>
        </member>
        <member name="P:EPPlusExtensions.ExcelCellInfoValue.ExcelColNameIndex">
            <summary>
            每个列名的Col位置
            </summary>
        </member>
        <member name="P:EPPlusExtensions.ExcelCellInfoValue.ExcelColName">
            <summary>
            excel原本的列名
            </summary>
        </member>
        <member name="T:EPPlusExtensions.ExcelCellPoint">
            <summary>
            普通单元格
            </summary>
        </member>
        <member name="F:EPPlusExtensions.ExcelCellPoint.R1C1">
            <summary>
            譬如A2等
            </summary>
        </member>
        <member name="M:EPPlusExtensions.ExcelCellPoint.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="row">从1开始的整数</param>
            <param name="col">从1开始的整数</param>
        </member>
        <member name="M:EPPlusExtensions.ExcelCellPoint.#ctor(OfficeOpenXml.ExcelAddress)">
            <summary>
            
            </summary>
            <param name="excelAddress"></param>
        </member>
        <member name="M:EPPlusExtensions.ExcelCellPoint.R1C1Formulas(System.String)">
            <summary>
            譬如: A->1 . 在excel的选项->属性->公式  下有个 R1C1引用样式
            </summary>
            <param name="col">只能是字母</param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.ExcelCellPoint.R1C1FormulasReverse(System.Int32)">
            <summary>
            譬如1->A 
            </summary>
            <param name="num">excel的第几列</param>
            <returns></returns>
        </member>
        <member name="T:EPPlusExtensions.ExcelCellRange">
            <summary>
            合并单元格
            </summary>
        </member>
        <member name="M:EPPlusExtensions.ExcelCellRange.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="r1c1">地址</param>
        </member>
        <member name="P:EPPlusExtensions.ExcelCellRange.Range">
            <summary>
            范围也就是R1C1的地址(保存的是配置时的字符串.在程序中用来当作key使用)
            </summary>
        </member>
        <member name="P:EPPlusExtensions.ExcelCellRange.Start">
            <summary>
            开始Point
            </summary>
        </member>
        <member name="P:EPPlusExtensions.ExcelCellRange.End">
            <summary>
            结束Point
            </summary>
        </member>
        <member name="P:EPPlusExtensions.ExcelCellRange.IntervalRow">
            <summary>
            间距行是多少
            </summary>
        </member>
        <member name="P:EPPlusExtensions.ExcelCellRange.IntervalCol">
            <summary>
            间距列是多少
            </summary>
        </member>
        <member name="P:EPPlusExtensions.ExcelCellRange.IsMerge">
            <summary>
            是否是合并单元格
            </summary>
        </member>
        <member name="T:EPPlusExtensions.ExcelDataConfigInfo">
            <summary>
            数据模板配置信息
            </summary>
        </member>
        <member name="P:EPPlusExtensions.ExcelDataConfigInfo.WorkSheetIndex">
            <summary>
            从1开始
            </summary>
        </member>
        <member name="P:EPPlusExtensions.ExcelDataConfigInfo.WorkSheetName">
            <summary>
            Index 和 Name 填写一个就可以了
            </summary>
        </member>
        <member name="P:EPPlusExtensions.ExcelDataConfigInfo.TitleLine">
            <summary>
            标题行(对于合并单元格,写起始单元格的信息)
            </summary>
        </member>
        <member name="P:EPPlusExtensions.ExcelDataConfigInfo.TitleColumn">
            <summary>
            标题列(对于合并单元格,写起始单元格的信息)
            </summary>
        </member>
        <member name="P:EPPlusExtensions.GetExcelListArgs.DataColStart">
            <summary>
            excel模板数据从哪列开始,可以理解成标题行的开始列,从1开始
            </summary>
        </member>
        <member name="P:EPPlusExtensions.GetExcelListArgs.DataColEnd">
            <summary>
            excel模板数据从哪列结束,可以理解成标题行的结束列
            </summary>
        </member>
        <member name="P:EPPlusExtensions.GetExcelListArgs.ws">
            <summary>
            workSheet
            </summary>
        </member>
        <member name="P:EPPlusExtensions.GetExcelListArgs.DataTitleRow">
            <summary>
            数据的标题行,自带方法提供的默认值是1 即:RowIndex_Data -1
            </summary>
        </member>
        <member name="P:EPPlusExtensions.GetExcelListArgs.DataRowStart">
            <summary>
            数据的起始行,自带方法提供的默认值是2
            </summary>
        </member>
        <member name="P:EPPlusExtensions.GetExcelListArgs.EveryCellPrefix">
            <summary>
            被遍历的单元格内容不为空时的起始字符必须是该字符,然后忽略该字符
            </summary>
        </member>
        <member name="P:EPPlusExtensions.GetExcelListArgs.UseEveryCellReplace">
            <summary>
            对每一个单元格进行替换(使用单元格替换)
            </summary>
        </member>
        <member name="P:EPPlusExtensions.GetExcelListArgs.EveryCellReplaceList">
            <summary>
            单元格替换列表
            </summary>
        </member>
        <member name="F:EPPlusExtensions.GetExcelListArgs.EveryCellReplaceListDefault">
            <summary>
            EveryCellReplace 的默认提供
            </summary>
        </member>
        <member name="P:EPPlusExtensions.GetExcelListArgs.ReadCellValueOption">
            <summary>
            读取每个单元格值时做的处理
            </summary>
        </member>
        <member name="P:EPPlusExtensions.GetExcelListArgs.POCO_Property_AutoRename_WhenRepeat">
            <summary>
            poco属性重名时自动命名
            </summary>
        </member>
        <member name="P:EPPlusExtensions.GetExcelListArgs.POCO_Property_AutoRenameFirtName_WhenRepeat">
            <summary>
            poco属性重命名修改第一个名字
            </summary>
        </member>
        <member name="F:EPPlusExtensions.GetExcelListArgs.GetList_NeedAllException">
            <summary>
            GetList异常时,获得全部异常,而不是一个
            </summary>
        </member>
        <member name="F:EPPlusExtensions.GetExcelListArgs.GetList_ErrorMessage_OnlyShowColomn">
            <summary>
            当GetList_NeedAllException 为 true 时, 错误消息只显示列信息
            </summary>
        </member>
        <member name="T:EPPlusExtensions.GetExcelListArgs`1">
            <summary>
            泛型版本的 GetExcelListArgs , 会比 GetExcelListArgs 多3个参数
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:EPPlusExtensions.GetExcelListArgs`1.HavingFilter">
            <summary>
            在return数据之前执行过滤操作
            </summary>
        </member>
        <member name="P:EPPlusExtensions.GetExcelListArgs`1.WhereFilter">
            <summary>
            检查数据,如果数据正确,添加到 返回数据 集合中
            </summary>
        </member>
        <member name="F:EPPlusExtensions.ReadCellValueOption.None">
            <summary>
            无
            </summary>
        </member>
        <member name="F:EPPlusExtensions.ReadCellValueOption.Trim">
            <summary>
            去空格
            </summary>
        </member>
        <member name="F:EPPlusExtensions.ReadCellValueOption.MergeLine">
            <summary>
            合并行
            </summary>
        </member>
        <member name="F:EPPlusExtensions.ReadCellValueOption.ToDBC">
            <summary>
            转半角
            </summary>
        </member>
        <member name="F:EPPlusExtensions.ScanLine.MergeLine">
            <summary>
            合并行模式(默认,以眼睛看到的为准)
            </summary>
        </member>
        <member name="F:EPPlusExtensions.ScanLine.SingleLine">
            <summary>
            逐行读取,
            </summary>
        </member>
        <member name="F:EPPlusExtensions.MatchingModel.eq">
            <summary>
            must equal Model=>[model:a,b    excel:a,b]
            </summary>
        </member>
        <member name="F:EPPlusExtensions.MatchingModel.gt">
            <summary>
            must greater than Model=>[model:a,b    excel:a,b,c]
            </summary>
        </member>
        <member name="F:EPPlusExtensions.MatchingModel.lt">
            <summary>
            must less Than Model=>[model:a,b    excel:a]
            </summary>
        </member>
        <member name="F:EPPlusExtensions.MatchingModel.neq">
            <summary>
            must not equal Model=>[model:a,b    excel:a,c] ||  [model:a,b    excel:c,d]
            </summary>
        </member>
        <member name="M:EPPlusExtensions.Helper.ExpressionTreeExtensions.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            Create object.
            </summary>
            <param name="type"></param>
            <param name="objects"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.Helper.ExpressionTreeExtensions.BuildDeletgateCreateInstance(System.Type,System.Type[])">
            <summary>
            Get a delegate object and use it to generate a entity class.
            </summary>
            <param name="type"></param>
            <param name="typeList"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.Helper.ExpressionTreeExtensions.GetExpressionArray(System.Type[],System.Linq.Expressions.ParameterExpression)">
            <summary>
            Get an expression array.
            </summary>
            <param name="typeList"></param>
            <param name="paramExp"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.Helper.SqlServerHelper.GetTreeTableMaxLevelSql(System.String,System.String,System.String,System.String)">
            <summary>
            获得树形表结构的最深的层级数的Sql语句
            </summary>
            <param name="tblName"></param>
            <param name="idFiledName"></param>
            <param name="parentIdName"></param>
            <param name="rootItemWhere">root(根)数据的where条件,即根据表名获得root(根)数据的条件是什么(不要使用表名.字段名, 只要字段名就可以了)</param>
        </member>
        <member name="M:EPPlusExtensions.Helper.SqlServerHelper.GetTreeTableIncludeLevelFieldSql(System.String,System.String,System.String,System.String,System.String,System.String[])">
            <summary>
            原本的树形表结构是没有Level字段的,通过该方法可以生成level字段
            </summary>
            <param name="tblName"></param>
            <param name="rootItemWhere"></param>
            <param name="nameFieldName"></param>
            <param name="idFiledName"></param>
            <param name="parentIdName"></param>
            <param name="otherFiledName"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.Helper.SqlServerHelper.GetTreeTableReportSql(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Char,System.String[])">
            <summary>
             根据 id, Name , parentId 3个字段生成额外字段Depth 和 用于报表排序的Sort字段
            </summary>
            <param name="tblName"></param>
            <param name="rootItemWhere"></param>
            <param name="nameFieldName"></param>
            <param name="idFiledName"></param>
            <param name="parentIdName"></param>
            <param name="eachSortFieldLength">每个Depth的长度,默认2. </param>
            <param name="reportSortFileTotallength">报表排序字段的总长度,默认为12如果真的要设置,level * Max(Len(主键))</param>
            <param name="rearChat">报表排序字段 / 每个Depth字段 小于 指定长度时填充的字符是什么</param>
            <param name="otherFiledName"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.MethodExtension.MemoryStreamExtensions.Save(System.IO.MemoryStream,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="memoryStream">内存流</param>
            <param name="savePath">保存的路径</param>
            <param name="memoryStreamPosition">设置流中的当前位置,默认0</param>
        </member>
        <member name="M:EPPlusExtensions.MethodExtension.StringExtensions.MergeLines(System.String)">
            <summary>
            合并行
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.MethodExtension.StringExtensions.ToDBC(System.String)">
            <summary>
            转半角的函数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:EPPlusExtensions.MethodExtension.TypeExtensions.HasImplementedRawGeneric(System.Type,System.Type)">
            <summary>
            判断指定的类型 <paramref name="type"/> 是否是指定泛型类型的子类型，或实现了指定泛型接口。
            </summary>
            <param name="type">需要测试的类型。</param>
            <param name="generic">泛型接口类型，传入 typeof(IXxx&lt;&gt;)</param>
            <returns>如果是泛型接口的子类型，则返回 true，否则返回 false。</returns>
        </member>
        <member name="T:EPPlusExtensions.SheetBodyFillDataMethod">
            <summary>
            SheetBody数据填充方式
            </summary>
        </member>
        <member name="F:EPPlusExtensions.SheetBodyFillDataMethod.FillDataMethodOption">
            <summary>
            填充数据选项
            </summary>
        </member>
        <member name="F:EPPlusExtensions.SheetBodyFillDataMethod.SynchronizationDataSource">
            <summary>
            填充数据同步方式
            </summary>
        </member>
        <member name="F:EPPlusExtensions.SheetBodyFillDataMethodOption.Default">
            <summary>
            按约定填充: 单元格上配置了什么就填充什么
            </summary>
        </member>
        <member name="F:EPPlusExtensions.SheetBodyFillDataMethodOption.SynchronizationDataSource">
            <summary>
            在约定填充的基础上,数据源 DataTable 的列如果没有被填充使用,那么将自动填充
            目前仅对单行的模版有效
            新增不包含样式(包括但不限于单行多列单元格)的新增
            </summary>
        </member>
        <member name="P:EPPlusExtensions.SynchronizationDataSourceConfig.NeedBody">
            <summary>
            需要同步Body
            </summary>
        </member>
        <member name="P:EPPlusExtensions.SynchronizationDataSourceConfig.NeedTitle">
            <summary>
            需要同步Title
            </summary>
        </member>
        <member name="P:EPPlusExtensions.SynchronizationDataSourceConfig.Include">
            <summary>
            多余列只需要哪些列
            </summary>
        </member>
        <member name="P:EPPlusExtensions.SynchronizationDataSourceConfig.Exclude">
            <summary>
            多余列中不要那些列
            </summary>
        </member>
        <member name="F:EPPlusExtensions.FillDataColumnsState.Unchanged">
            <summary>
            未使用
            </summary>
        </member>
        <member name="F:EPPlusExtensions.FillDataColumnsState.Used">
            <summary>
            已使用
            </summary>
        </member>
        <member name="F:EPPlusExtensions.FillDataColumnsState.WillUse">
            <summary>
            将要使用
            </summary>
        </member>
        <member name="F:EPPlusExtensions.FillDataColumnsState.WillNotUse">
            <summary>
            将不会使用
            </summary>
        </member>
    </members>
</doc>
