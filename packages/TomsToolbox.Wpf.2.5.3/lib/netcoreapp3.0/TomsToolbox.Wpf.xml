<?xml version="1.0" encoding="utf-8"?>
<doc>
    <assembly>
        <name>TomsToolbox.Wpf</name>
    </assembly>
    <members>
        <member name="T:TomsToolbox.Wpf.BindingErrorTracer">
            <summary>
            Helper class to detect binding errors during debugging.<para /> 
            All functionality is only active if a debugger is attached.<para /> 
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.BindingErrorTracer.IgnoredErrors">
            <summary>
            The errors to be ignored during error handling.
            <p /><c>[NotNull, ItemNotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.BindingErrorTracer.Start(System.Action{System.String})">
            <summary>
            Hooks into <see cref="T:System.Diagnostics.PresentationTraceSources" /> to listen for binding errors with <see cref="F:System.Diagnostics.SourceLevels.Warning" />.
            </summary>
            <param name="errorCallback">The callback that is called in case of binding errors, to show an error message or throw an exception<p /><c>[NotNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.BindingErrorTracer.Start(System.Action{System.String},System.Diagnostics.SourceLevels)">
            <summary>
            Hooks into <see cref="T:System.Diagnostics.PresentationTraceSources" /> to listen for binding errors.
            </summary>
            <param name="errorCallback">The callback that is called in case of binding errors, to show an error message or throw an exception<p /><c>[NotNull]</c></param>
            <param name="sourceLevels">The source levels that trigger a warning.</param>
        </member>
        <member name="M:TomsToolbox.Wpf.BindingErrorTracer.Listener.Write(System.String)">
            <summary>
            When overridden in a derived class, writes the specified message to the listener you create in the derived class.
            </summary>
            <param name="message">A message to write. </param>
        </member>
        <member name="M:TomsToolbox.Wpf.BindingErrorTracer.Listener.WriteLine(System.String)">
            <summary>
            When overridden in a derived class, writes a message to the listener you create in the derived class, followed by a line terminator.
            </summary>
            <param name="message">A message to write. </param>
        </member>
        <member name="T:TomsToolbox.Wpf.BindingRelay">
            <summary>
            A simple helper to relay the data context to objects that don't live in the visual tree.
            </summary>
            <example>
            <code language="xaml"><![CDATA[
            <DataGrid>
              <DataGrid.Resources>
                <local:BindingRelay x:Key="relay" DataContext="{Binding}"/>
              </DataGrid.Resources>
              <DataGrid.Columns>
                <DataGridTextColumn Visibility="{Binding DataContext.MyColumnVisibility, Source={StaticResource relay}}"/>
              </DataGrid.Columns>
            </DataGrid>]]></code>
            </example>
        </member>
        <member name="M:TomsToolbox.Wpf.BindingRelay.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable" /> derived class.
            </summary>
            <returns>
            The new instance.
            </returns>
        </member>
        <member name="P:TomsToolbox.Wpf.BindingRelay.DataContext">
            <summary>
            Gets or sets the data to be relayed, usually the DataContext of the owning object.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.BindingRelay.DataContextProperty">
            <summary>
            Identifies th <see cref="P:TomsToolbox.Wpf.BindingRelay.DataContext" /> dependency property.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="T:TomsToolbox.Wpf.CanvasAnchor">
            <summary>
            Anchors for a canvas to specify two coordinates in one single operation specifying a <see cref="T:System.Windows.Point" />.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.CanvasAnchor.GetTopLeft(System.Windows.UIElement)">
            <summary>
            Gets the elements <see cref="P:TomsToolbox.Wpf.CanvasAnchor.TopLeft" /> point in the canvas.
            </summary>
            <param name="obj">The object on which this property was set.<p /><c>[NotNull]</c></param>
            <returns>The point.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.CanvasAnchor.SetTopLeft(System.Windows.UIElement,System.Windows.Point)">
            <summary>
            Sets the elements <see cref="P:TomsToolbox.Wpf.CanvasAnchor.TopLeft" /> point in the canvas.
            </summary>
            <param name="obj">The object on which to set <see cref="P:System.Windows.Controls.Canvas.Top" /> and <see cref="P:System.Windows.Controls.Canvas.Left" />.<p /><c>[NotNull]</c></param>
            <param name="value">The point.</param>
        </member>
        <member name="F:TomsToolbox.Wpf.CanvasAnchor.TopLeftProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.CanvasAnchor.TopLeft" /> attached property
            <p /><c>[NotNull]</c></summary>
            <AttachedPropertyComments>
            <summary>
            A helper property to assign the coordinates of a <see cref="T:System.Windows.Point" /> to the 
            <see cref="P:System.Windows.Controls.Canvas.Top" /> and <see cref="P:System.Windows.Controls.Canvas.Left" /> property in one single operation.
            </summary>
            <remarks>
            This property is only "one way", i.e. changing <see cref="P:System.Windows.Controls.Canvas.Top" /> or <see cref="P:System.Windows.Controls.Canvas.Left" /> 
            will not affect this attached property.
            </remarks>
            </AttachedPropertyComments>
        </member>
        <member name="M:TomsToolbox.Wpf.CanvasAnchor.GetTopRight(System.Windows.UIElement)">
            <summary>
            Gets the elements <see cref="P:TomsToolbox.Wpf.CanvasAnchor.TopRight" /> point in the canvas.
            </summary>
            <param name="obj">The object on which this property was set.<p /><c>[NotNull]</c></param>
            <returns>The point.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.CanvasAnchor.SetTopRight(System.Windows.UIElement,System.Windows.Point)">
            <summary>
            Sets the elements <see cref="P:TomsToolbox.Wpf.CanvasAnchor.TopRight" /> point in the canvas.
            </summary>
            <param name="obj">The object on which to set <see cref="P:System.Windows.Controls.Canvas.Top" /> and <see cref="P:System.Windows.Controls.Canvas.Right" />.<p /><c>[NotNull]</c></param>
            <param name="value">The point.</param>
        </member>
        <member name="F:TomsToolbox.Wpf.CanvasAnchor.TopRightProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.CanvasAnchor.TopRight" /> attached property
            <p /><c>[NotNull]</c></summary>
            <AttachedPropertyComments>
            <summary>
            A helper property to assign the coordinates of a <see cref="T:System.Windows.Point" /> to the 
            <see cref="P:System.Windows.Controls.Canvas.Top" /> and <see cref="P:System.Windows.Controls.Canvas.Right" /> property in one single operation.
            </summary>
            <remarks>
            This property is only "one way", i.e. changing <see cref="P:System.Windows.Controls.Canvas.Top" /> or <see cref="P:System.Windows.Controls.Canvas.Right" /> 
            will not affect this attached property.
            </remarks>
            </AttachedPropertyComments>
        </member>
        <member name="M:TomsToolbox.Wpf.CanvasAnchor.GetBottomLeft(System.Windows.UIElement)">
            <summary>
            Gets the elements <see cref="P:TomsToolbox.Wpf.CanvasAnchor.BottomLeft" /> point in the canvas.
            </summary>
            <param name="obj">The object on which this property was set.<p /><c>[NotNull]</c></param>
            <returns>The point.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.CanvasAnchor.SetBottomLeft(System.Windows.UIElement,System.Windows.Point)">
            <summary>
            Sets the elements <see cref="P:TomsToolbox.Wpf.CanvasAnchor.BottomLeft" /> point in the canvas.
            </summary>
            <param name="obj">The object on which to set <see cref="P:System.Windows.Controls.Canvas.Bottom" /> and <see cref="P:System.Windows.Controls.Canvas.Left" />.<p /><c>[NotNull]</c></param>
            <param name="value">The point.</param>
        </member>
        <member name="F:TomsToolbox.Wpf.CanvasAnchor.BottomLeftProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.CanvasAnchor.BottomLeft" /> attached property
            <p /><c>[NotNull]</c></summary>
            <AttachedPropertyComments>
            <summary>
            A helper property to assign the coordinates of a <see cref="T:System.Windows.Point" /> to the 
            <see cref="P:System.Windows.Controls.Canvas.Bottom" /> and <see cref="P:System.Windows.Controls.Canvas.Left" /> property in one single operation.
            </summary>
            <remarks>
            This property is only "one way", i.e. changing <see cref="P:System.Windows.Controls.Canvas.Bottom" /> or <see cref="P:System.Windows.Controls.Canvas.Left" /> 
            will not affect this attached property.
            </remarks>
            </AttachedPropertyComments>
        </member>
        <member name="M:TomsToolbox.Wpf.CanvasAnchor.GetBottomRight(System.Windows.UIElement)">
            <summary>
            Gets the elements <see cref="P:TomsToolbox.Wpf.CanvasAnchor.BottomRight" /> point in the canvas.
            </summary>
            <param name="obj">The object on which this property was set.<p /><c>[NotNull]</c></param>
            <returns>The point.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.CanvasAnchor.SetBottomRight(System.Windows.UIElement,System.Windows.Point)">
            <summary>
            Sets the elements <see cref="P:TomsToolbox.Wpf.CanvasAnchor.BottomRight" /> point in the canvas.
            </summary>
            <param name="obj">The object on which to set <see cref="P:System.Windows.Controls.Canvas.Bottom" /> and <see cref="P:System.Windows.Controls.Canvas.Right" />.<p /><c>[NotNull]</c></param>
            <param name="value">The point.</param>
        </member>
        <member name="F:TomsToolbox.Wpf.CanvasAnchor.BottomRightProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.CanvasAnchor.BottomRight" /> attached property
            <p /><c>[NotNull]</c></summary>
            <AttachedPropertyComments>
            <summary>
            A helper property to assign the coordinates of a <see cref="T:System.Windows.Point" /> to the 
            <see cref="P:System.Windows.Controls.Canvas.Bottom" /> and <see cref="P:System.Windows.Controls.Canvas.Right" /> property in one single operation.
            </summary>
            <remarks>
            This property is only "one way", i.e. changing <see cref="P:System.Windows.Controls.Canvas.Bottom" /> or <see cref="P:System.Windows.Controls.Canvas.Right" /> 
            will not affect this attached property.
            </remarks>
            </AttachedPropertyComments>
        </member>
        <member name="T:TomsToolbox.Wpf.ClipboardHelper">
            <summary>
            Helper methods to interchange data via clipboard.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.ClipboardHelper.GetClipboardDataAsTable">
            <summary>
            Gets the clipboard data as a table.
            <p /><c>[CanBeNull, ItemNotNull]</c></summary>
            <returns>The parsed clipboard data as a table, or <c>null</c> if the clipboard is empty or does not contain normalized table data.</returns>
            <remarks>If no TEXT is present in the clipboard, CSV data is used.</remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.ClipboardHelper.SetClipboardData(System.Collections.Generic.IList{System.Collections.Generic.IList{System.String}})">
            <summary>
            Sets the clipboard data for the specified table.
            </summary>
            <param name="table">The table.<p /><c>[CanBeNull, ItemNotNull]</c></param>
            <remarks>
            This method sets the TEXT (tab delimited) and CSV data. Like in Excel the CSV delimiter is either comma or semicolon, depending on the current culture.
            </remarks>
        </member>
        <member name="T:TomsToolbox.Wpf.Controls.Icon">
            <summary>
            An image control that accepts a list of image sources and displays the image that best fits the size of the control.
            </summary>
            <seealso cref="T:System.Windows.Controls.Control" />
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.Icon.Viewport">
            <summary>
            Gets or sets the optional viewport where the image will be displayed. If the viewport property is not set, the window is used.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.Icon.ViewportProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Icon.Viewport" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.Icon.Sources">
            <summary>
            Gets or sets the image sources that are candidates for the target image.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.Icon.SourcesProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Icon.Sources" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.Icon.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.Icon.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <inheritdoc />
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.Icon.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.Icon.ArrangeOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="T:TomsToolbox.Wpf.Controls.IImage">
            <summary>
            Implemented by image providers to provide a dynamically loadable image.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.IImage.Source">
            <summary>
            Gets the source of the image.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.IImage.IsLoaded">
            <summary>
            Gets a value indicating whether the image of this instance is loaded.
            </summary>
        </member>
        <member name="E:TomsToolbox.Wpf.Controls.IImage.Loaded">
            <summary>
            Occurs when the image is loaded.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.Controls.IImageProvider">
            <summary>
            Implemented by image providers for the <see cref="T:TomsToolbox.Wpf.Controls.Map" /> control.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.IImageProvider.MinZoom">
            <summary>
            Gets the minimum zoom factor supported by this provider.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.IImageProvider.MaxZoom">
            <summary>
            Gets the maximum zoom factor supported by this provider.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.IImageProvider.GetImage(TomsToolbox.Wpf.Controls.IMapTile)">
            <summary>
            Gets the image for a map tile.
            <p /><c>[NotNull]</c></summary>
            <param name="tile">The tile for which to provide the image.<p /><c>[NotNull]</c></param>
            <returns>The image.</returns>
        </member>
        <member name="T:TomsToolbox.Wpf.Controls.IMapTile">
            <summary>
            Implemented by representations of a map tile.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.IMapTile.X">
            <summary>
            Gets the horizontal index of this tile.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.IMapTile.Y">
            <summary>
            Gets the vertical index of this tile.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.IMapTile.ZoomLevel">
            <summary>
            Gets the zoom level of this tile.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.IMapTile.Parent">
            <summary>
            Gets the parent tile, or <c>null</c> if this is the root tile.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.IMapTile.Unload">
            <summary>
            Unloads this instance when the tile is no longer visible.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.Controls.InPlaceEdit">
            <inheritdoc />
            <summary>
            Text control supporting in place editing.
            <para />
            Editing starts
            <list type="bullet">
            <item>by deferred mouse double click</item>
            <item>by pressing F2</item>
            <item>setting IsEditing to true</item>
            </list>
            <para />
            Editing terminates
            <list type="bullet">
            <item>when the focus gets lost (changes accepted)</item>
            <item>when setting IsEditing to false (changes accepted)</item>
            <item>when the user clicks outside the text box or moves the mouse wheel (changes accepted)</item>
            <item>by pressing RETURN (changes accepted)</item>
            <item>by pressing ESC (changes rejected)</item>
            </list>
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.InPlaceEdit.#ctor">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Controls.InPlaceEdit" /> class.
            </summary>
        </member>
        <member name="E:TomsToolbox.Wpf.Controls.InPlaceEdit.Validate">
            <summary>
            Occurs when the edited text needs to be validated.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.InPlaceEdit.Text">
            <summary>
            Gets or sets the text to be edited.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.InPlaceEdit.TextProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.InPlaceEdit.Text" /> dependency property.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.InPlaceEdit.IsEditing">
            <summary>
            Gets or sets a value indicating whether editing is active.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.InPlaceEdit.IsEditingProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.InPlaceEdit.IsEditing" /> dependency property.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.InPlaceEdit.IsEditingDisabled">
            <summary>
            Gets or sets a value indicating whether editing is currently disabled.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.InPlaceEdit.IsEditingDisabledProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.InPlaceEdit.IsEditingDisabled" /> dependency property.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.InPlaceEdit.HasErrors">
            <summary>
            Gets or sets a value indicating whether the edited text has errors; if there are errors the text can't be committed.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.InPlaceEdit.HasErrorsProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.InPlaceEdit.HasErrors" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.InPlaceEdit.TextTrimming">
            <summary>
            Gets or sets the text trimming.
            </summary>
            <value>
            The text trimming.
            </value>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.InPlaceEdit.TextTrimmingProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.InPlaceEdit.TextTrimming" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.InPlaceEdit.TextAlignment">
            <summary>
            Gets or sets the text alignment.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.InPlaceEdit.TextAlignmentProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.InPlaceEdit.TextAlignment" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.InPlaceEdit.OnApplyTemplate">
            <inheritdoc />
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.InPlaceEdit.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.InPlaceEdit.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:TomsToolbox.Wpf.Controls.LoadingIndicator">
            <summary>
            A loading indicator showing a rotating animation when active.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.LoadingIndicator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Controls.LoadingIndicator" /> class.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.LoadingIndicator.IsActive">
            <summary>
            Gets or sets a value indicating whether the loading indicator is active or hidden.
            </summary>
            <value>
              <c>true</c> if this instance is active; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.LoadingIndicator.IsActiveProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.LoadingIndicator.IsActive" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.LoadingIndicator.Header">
            <summary>
            Gets or sets the header that is displayed centered above the graphics.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.LoadingIndicator.HeaderProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.LoadingIndicator.Header" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.LoadingIndicator.ActiveBackgroundColor">
            <summary>
            Gets or sets the background when the loading indicator is active.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.LoadingIndicator.ActiveBackgroundColorProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.LoadingIndicator.ActiveBackgroundColor" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.LoadingIndicator.AnimationLayoutTransform">
            <summary>
            Gets or sets the layout transform applied to the animation.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.LoadingIndicator.AnimationLayoutTransformProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.LoadingIndicator.AnimationLayoutTransform" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="T:TomsToolbox.Wpf.Controls.Map">
            <summary>
            A control showing maps represented in a tile system, e.g. Open Street Map, Bing or Google maps.
            See e.g. <see href="https://msdn.microsoft.com/en-us/library/bb259689.aspx" /> for a description how the tile system works.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.Map.TemplatePartWorld">
            <summary>
            The template part name of the world visual.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.Map.TemplatePartViewport">
            <summary>
            The template part name of the viewport visual.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.Map.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Controls.Map" /> class.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.Map.ViewportSize">
            <summary>
            Gets the zoom factor.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.Map.ViewportSizeProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.ViewportSize" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.Map.ImageProvider">
            <summary>
            Gets or sets the image provider.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.Map.ImageProviderProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.ImageProvider" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.Map.ZoomFactor">
            <summary>
            Gets the zoom factor.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.Map.ZoomFactorProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.ZoomFactor" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.Map.ZoomLevel">
            <summary>
            Gets or sets the zoom level. Set to integer values to get non-blurred images.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.Map.ZoomLevelProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.ZoomLevel" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.Map.Center">
            <summary>
            Gets or sets the logical point of the map that is displayed in the center of the viewport.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.Map.CenterProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.Center" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.Map.Offset">
            <summary>
            Gets the logical offset that the map image is moved relative to it's origin.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.Map.OffsetProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.Offset" /> read only dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.Map.ZoomingPoint">
            <summary>
            Gets or sets the logical coordinates of the zooming point that will stay fixed when zooming.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.Map.ZoomingPointProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.ZoomingPoint" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.Map.Bounds">
            <summary>
            Gets the bounds of the viewport in logical coordinates.
            </summary>
            <remarks>
            This property only has a public setter to enable binding; changing this property wont have any effect.
            </remarks>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.Map.BoundsProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.Bounds" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.Map.World">
            <summary>
            Gets the element representing the map layer.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.Map.WorldProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.World" /> dependency property.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.Map.Viewport">
            <summary>
            Gets the element representing the viewport.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.Map.ViewportProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.Viewport" /> dependency property.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.Map.MousePosition">
            <summary>
            Gets the last mouse position when the mouse was over the map in logical coordinates.
            </summary>
            <remarks>
            This property only has a public setter to enable binding; changing this property wont have any effect.
            </remarks>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.Map.MousePositionProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.MousePosition" /> dependency property.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.Map.MouseDoubleClickCommand">
            <summary>
            Gets or sets the double click command. The command will be executed when the user double clicks on the map.
            The command parameter is a <see cref="T:System.Windows.Point" /> containing the logical coordinates.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.Map.MouseDoubleClickCommandProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.Map.MouseDoubleClickCommand" /> dependency property.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.Map.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate" />.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.Map.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            Raises the <see cref="E:System.Windows.FrameworkElement.SizeChanged" /> event, using the specified information as part of the eventual event data.
            </summary>
            <param name="sizeInfo">Details of the old and new size involved in the change.</param>
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.Map.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.PreviewMouseMove" /> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseEventArgs" /> that contains the event data.</param>
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.Map.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Controls.Control.MouseDoubleClick" /> routed event.
            </summary>
            <param name="e">The event data.</param>
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.Map.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <inheritdoc />
        </member>
        <member name="T:TomsToolbox.Wpf.Controls.MapTile">
            <summary>
            Represents on tile in the map.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.MapTile.TileSize">
            <summary>
            The size of one tile in pixels.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.MapTile.#ctor">
            <summary>
            Initializes a new root instance of the <see cref="T:TomsToolbox.Wpf.Controls.MapTile" /> class.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.MapTile.#ctor(TomsToolbox.Wpf.Controls.IMapTile,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Controls.MapTile" /> class.
            </summary>
            <param name="parent">The parent.</param>
            <param name="x">The x.</param>
            <param name="y">The y.</param>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.MapTile.X">
            <summary>
            Gets the horizontal index of this tile.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.MapTile.Y">
            <summary>
            Gets the vertical index of this tile.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.MapTile.ZoomLevel">
            <summary>
            Gets the zoom level of this tile.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.MapTile.TomsToolbox#Wpf#Controls#IMapTile#Parent">
            <summary>
            Gets the logical parent  element of this element.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.MapTile.Unload">
            <summary>
            Unloads this instance when the tile is no longer visible.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.MapTile.Viewport">
            <summary>
            Gets or sets the viewport where the map will be displayed.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.MapTile.ViewportProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.MapTile.Viewport" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.MapTile.ImageProvider">
            <summary>
            Gets or sets the image provider that can load the images.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.MapTile.ImageProviderProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.MapTile.ImageProvider" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.MapTile.Image">
            <summary>
            Gets or sets the image for this tile.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.MapTile.ImageProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.MapTile.Image" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.MapTile.Invalidate">
            <summary>
            Invalidates the layout of this instance.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.MapTile.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:TomsToolbox.Wpf.Controls.PixelSnapper">
            <summary>
            Moves the view port by fractional pixels, so the control's top left point is always aligned on a pixel boundary.
            See e.g. <see href="https://msdn.microsoft.com/de-de/library/aa970908.aspx" />.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.PixelSnapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Controls.PixelSnapper" /> class.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.PixelSnapper.Viewport">
            <summary>
            Gets or sets the view port displaying this control.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.PixelSnapper.ViewportProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.PixelSnapper.Viewport" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.PixelSnapper.Invalidate">
            <summary>
            Invalidates the layout of this instance.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.Controls.SharedWidthHeaderedContentControl">
             <summary>
             A headered content control with it's header on the left side.
             Host in a panel with the <see cref="F:System.Windows.Controls.Grid.IsSharedSizeScopeProperty" /> set to <c>true</c> to use the same width for all headers.
             </summary>
             <example>
             <code language="XAML">
             <![CDATA[
             <StackPanel Grid.IsSharedSizeScope="True" >
               <SharedWidthHeaderedContentControl Header="Name:">
                 <TextBox Text="{Binding Name}" />
               </SharedWidthHeaderedContentControl>
               <Decorator Height="10"/>
               <SharedWidthHeaderedContentControl Header="Description:">
                 <TextBox Text="{Binding Description}" />
               </SharedWidthHeaderedContentControl>
             </StackPanel>]]>
             </code>
             <code>
             This will look something like:
            
             Name:        [............]
            
             Description: [............]
             </code>
             </example>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.SharedWidthHeaderedContentControl.HeaderPadding">
            <summary>
            Gets or sets the padding applied to the header.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.SharedWidthHeaderedContentControl.HeaderPaddingProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.SharedWidthHeaderedContentControl.HeaderPadding" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="T:TomsToolbox.Wpf.Controls.ViewportCanvas">
            <summary>
            A canvas that transforms the coordinates of it's children to the own visual before arranging them. 
            It is used to have an overlay of non-scaled object on top of a scaled object, where the coordinates of the overlay objects are expressed in the coordinate system 
            of the scaled object (<see cref="P:TomsToolbox.Wpf.Controls.ViewportCanvas.World" />). One major use case are e.g. pin points on a map, where the map scales, while the pin points only move but keep their size.
            While the <see cref="T:System.Windows.Controls.Canvas" /> only accepts one of <see cref="P:System.Windows.Controls.Canvas.Left" />/<see cref="P:System.Windows.Controls.Canvas.Right" /> 
            or <see cref="P:System.Windows.Controls.Canvas.Top" />/<see cref="P:System.Windows.Controls.Canvas.Bottom" />, 
            with the ViewportCanvas you can specify both to stretch the object accordingly to the transformation.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Controls.ViewportCanvas.World">
            <summary>
            Gets or sets the physical layer. The children's coordinates are assumed to be relative to the physical layer.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Controls.ViewportCanvas.WorldProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Controls.ViewportCanvas.World" /> dependency property.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.ViewportCanvas.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement" />-derived class.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.</param>
            <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.ViewportCanvas.ArrangeOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, positions child elements and determines a size for a <see cref="T:System.Windows.FrameworkElement" /> derived class.
            </summary>
            <param name="finalSize">The final area within the parent that this element should use to arrange itself and its children.</param>
            <returns>
            The actual size used.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Controls.ViewportCanvas.Invalidate">
            <summary>
            Invalidates the layout of this instance.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.AggregatingMultiValueConverter">
            <summary>
            A converter that aggregates the inner converters for all values, overcoming the restriction of .Net that <see cref="T:System.Windows.Data.IMultiValueConverter" /> can't be nested.
            </summary>
            <remarks>
            This converter aggregates the result by calling each of the <see cref="P:TomsToolbox.Wpf.Converters.AggregatingMultiValueConverter.Converters" /> with the aggregated value as input and the next value as parameter, 
            i.e. the first converter will aggregate value[0] and value[1], the second converter will aggregate the result of the first and value[2], etc.<para />
            If there are less converters than parameters-1, and the last converter is an <see cref="T:System.Windows.Data.IValueConverter" />, the last converter is used to aggregate the remainder of values.<para />
            If there are less converters than parameters-1, and the last converter is an <see cref="T:System.Windows.Data.IMultiValueConverter" />, the <see cref="T:System.Windows.Data.IMultiValueConverter" /> is invoked with the aggregated value and all remaining values.
            </remarks>
            <example>
            
            <code language="XAML"><![CDATA[
            <Window.Resources>
              <toms:CompositeMultiValueConverter  x:Key="ThresholdConverter">
                <toms:CompositeMultiValueConverter.MultiValueConverter>
                  <toms:AggregatingMultiValueConverter>
                    <toms:BinaryOperationConverter Operation="Subtraction"/>
                    <toms:BinaryOperationConverter Operation="LessThanOrEqual"/>
                  </toms:AggregatingMultiValueConverter>
                </toms:CompositeMultiValueConverter.MultiValueConverter>
                <toms:BooleanToVisibilityConverter/>
              </toms:CompositeMultiValueConverter>
            </Window.Resources>
            <TextBlock Text="The elapsed time is less than the minimum required time!">
              <TextBlock.Visibility>
                <MultiBinding Converter="{StaticResource ThresholdConverter}">
                    <Binding Path="Now" Source="{x:Static toms:DateTimeSource.Default}"/>
                    <Binding Path="OperationStartTime"/>
                    <Binding Path="MinimumOperationTime"/>
                </MultiBinding>
              </TextBlock.Visibility>
            </TextBlock>
            ]]></code>
            </example>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.AggregatingMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            <p /><c>[CanBeNull]</c></summary>
            <param name="values">The values produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="P:TomsToolbox.Wpf.Converters.AggregatingMultiValueConverter.Converters">
            <summary>
            Gets the aggregating converters. Must be all <see cref="T:System.Windows.Data.IValueConverter" />, only the last might be a <see cref="T:System.Windows.Data.IMultiValueConverter" />.
            <p /><c>[NotNull, ItemNotNull]</c></summary>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.ArithmeticOperation">
            <summary>
            The arithmetic operation performed by the <see cref="T:TomsToolbox.Wpf.Converters.ArithmeticMultiValueConverter" />
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.ArithmeticOperation.Min">
            <summary>
            The arithmetic MIN operation; returns the minimum of all items.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.ArithmeticOperation.Max">
            <summary>
            The arithmetic MAX operation; returns the maximum of all items.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.ArithmeticOperation.Sum">
            <summary>
            The arithmetic sum operation; returns the sum of all items.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.ArithmeticOperation.Average">
            <summary>
            The arithmetic average operation; returns the average of all items.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.ArithmeticOperation.Product">
            <summary>
            The arithmetic product operation; returns the product of all items.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.ArithmeticMultiValueConverter">
            <summary>
            A <see cref="T:System.Windows.Data.IMultiValueConverter" /> that performs a arithmetic operation on all items.
            </summary>
            <remarks>
            All items must be convertible to double.
            </remarks>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.ArithmeticMultiValueConverter.Min">
            <summary>
            The default arithmetic MIN converter. 
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.ArithmeticMultiValueConverter.Max">
            <summary>
            The default arithmetic MAX converter. 
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.ArithmeticMultiValueConverter.Sum">
            <summary>
            The default arithmetic SUM converter. 
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.ArithmeticMultiValueConverter.Average">
            <summary>
            The default arithmetic AVERAGE converter. 
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.ArithmeticMultiValueConverter.Product">
            <summary>
            The default arithmetic PRODUCT converter. 
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Converters.ArithmeticMultiValueConverter.Operation">
            <summary>
            Gets or sets the operation to be performed on all items.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ArithmeticMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            An input value of null will return null, whereas if the input array contains UnSet then UnSet will be returned.
            <p /><c>[NotNull]</c></summary>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value.
            </returns>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.BinaryOperationConverter">
            <summary>
            Applies the <see cref="P:TomsToolbox.Wpf.Converters.BinaryOperationConverter.Operation" /> on the value and the converter parameter.<para />
            May also be used as <see cref="T:System.Windows.Data.IMultiValueConverter" /> where both operands are specified using bindings.
            </summary>
            <returns>
            If the conversions succeed, the result of the operation is returned. If any error occurs, the result is <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.
            </returns>
            <remarks>
            Either<para />
            - both value and parameter must be convertible to a double<para />
            or<para /> 
            - value must have an explicit operator for the specified operation and parameter has a type converter matching the expected operator parameter.<para />
            If the value supports implicit or explicit casts, the operation is retried on all types that the original type can be casted to. This enables the converter to handle most operations on <see cref="T:System.Windows.Vector" />, <see cref="T:System.Windows.Size" />, <see cref="T:System.Windows.Point" />, etc...<para />
            <para /> 
            For <see cref="T:System.Windows.Rect" /> the <see cref="F:TomsToolbox.Essentials.BinaryOperation.Addition" /> is mapped to <see cref="M:System.Windows.Rect.Offset(System.Windows.Vector)" /> and
            the <see cref="F:TomsToolbox.Essentials.BinaryOperation.Multiply" /> is mapped to <see cref="M:System.Windows.Rect.Transform(System.Windows.Media.Matrix)" />
            </remarks>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.BinaryOperationConverter.Addition">
            <summary>
            The default addition converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.BinaryOperationConverter.Subtraction">
            <summary>
            The default subtraction converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.BinaryOperationConverter.Multiply">
            <summary>
            The default multiplication converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.BinaryOperationConverter.Division">
            <summary>
            The default division converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.BinaryOperationConverter.Equality">
            <summary>
            The default equality converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.BinaryOperationConverter.Inequality">
            <summary>
            The default inequality converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.BinaryOperationConverter.GreaterThan">
            <summary>
            The default greater than converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.BinaryOperationConverter.LessThan">
            <summary>
            The default less than converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.BinaryOperationConverter.GreaterThanOrEqual">
            <summary>
            The default greater than or equals converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.BinaryOperationConverter.LessThanOrEqual">
            <summary>
            The default less than or equals converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Converters.BinaryOperationConverter.Operation">
            <summary>
            Gets or sets the operation the converter is performing.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.BinaryOperationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            <p /><c>[CanBeNull]</c></summary>
            <param name="value">The value produced by the binding source.</param>
            <param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.BinaryOperationConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            <p /><c>[CanBeNull]</c></summary>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to provide for conversion.<p /><c>[CanBeNull]</c></param>
            <param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value.If the method returns null, the valid null value is used.A return value of <see cref="T:System.Windows.DependencyProperty" />.<see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the converter did not produce a value, and that the binding will use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> if it is available, or else will use the default value.A return value of <see cref="T:System.Windows.Data.Binding" />.<see cref="F:System.Windows.Data.Binding.DoNothing" /> indicates that the binding does not transfer the value or use the <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> or the default value.
            </returns>
            <exception cref="T:System.ArgumentException">MultiValueConverter requires two values.;values</exception>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.BinaryOperationConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a binding target value to the source binding values.
            <p /><c>[CanBeNull]</c></summary>
            <param name="value">The value that the binding target produces.<p /><c>[CanBeNull]</c></param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <exception cref="T:System.InvalidOperationException">This operation is not supported.</exception>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.BooleanToVisibilityConverter">
            <summary>
            The counterpart of VisibilityToBooleanConverter.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.BooleanToVisibilityConverter.Default">
            <summary>
            The singleton instance of the converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Converters.BooleanToVisibilityConverter.VisibilityWhenBooleanIsFalse">
            <summary>
            The visibility value to be used when converting from a false boolean value. Defaults to Collapsed.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.BooleanToVisibilityConverter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Converters.BooleanToVisibilityConverter" /> class.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.BooleanToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            <p /><c>[NotNull]</c></summary>
            <param name="value">The value that is produced by the binding target.<p /><c>[CanBeNull]</c></param>
            <param name="targetType">The type to convert to.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.BooleanToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            <p /><c>[NotNull]</c></summary>
            <param name="value">The value that is produced by the binding target.<p /><c>[CanBeNull]</c></param>
            <param name="targetType">The type to convert to.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value.
            </returns>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.ColorNameToBrushConverter">
            <summary>
            Converts a color name to the corresponding solid color brush. See <see cref="T:System.Windows.Media.BrushConverter" /> for supported values.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.ColorNameToBrushConverter.Default">
            <summary>
            The singleton instance of the converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ColorNameToBrushConverter.Convert(System.String)">
            <summary>
            Converts the specified color name.
            Null and UnSet are unchanged.
            <p /><c>[CanBeNull]</c></summary>
            <param name="colorName">The color name.<p /><c>[CanBeNull]</c></param>
            <returns>The corresponding brush if the conversion was successful; otherwise <c>null</c>.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ColorNameToBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            <p /><c>[CanBeNull]</c></summary>
            <param name="value">The value produced by the binding source.<p /><c>[CanBeNull]</c></param>
            <param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.CompositeConverter">
            <summary>
            A converter composed of a chain of converters. The converters are invoked in the oder specified.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Converters.CompositeConverter.Converters">
            <summary>
            Gets the chain of converters.
            <p /><c>[NotNull, ItemNotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.CompositeConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            <p /><c>[CanBeNull]</c></summary>
            <param name="value">The value produced by the binding source.<p /><c>[CanBeNull]</c></param>
            <param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.CompositeConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            <p /><c>[CanBeNull]</c></summary>
            <param name="value">The value that is produced by the binding target.<p /><c>[CanBeNull]</c></param>
            <param name="targetType">The type to convert to.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value.
            </returns>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.CompositeMultiValueConverter">
            <summary>
            A <see cref="T:System.Windows.Data.IMultiValueConverter" /> that chains one <see cref="T:System.Windows.Data.IMultiValueConverter" /> with a list of <see cref="T:System.Windows.Data.IValueConverter" />.
            The <see cref="P:TomsToolbox.Wpf.Converters.CompositeMultiValueConverter.MultiValueConverter" /> is invoked first, and the result is converted by the <see cref="P:TomsToolbox.Wpf.Converters.CompositeMultiValueConverter.Converters" /> in the specified order.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Converters.CompositeMultiValueConverter.MultiValueConverter">
            <summary>
            Gets or sets the multi value converter.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Converters.CompositeMultiValueConverter.Converters">
            <summary>
            Gets the list of converters.
            <p /><c>[NotNull, ItemNotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.CompositeMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            <p /><c>[CanBeNull]</c></summary>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to provide for conversion.<p /><c>[CanBeNull]</c></param>
            <param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.CompositeMultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a binding target value to the source binding values.
            <p /><c>[CanBeNull]</c></summary>
            <param name="value">The value that the binding target produces.<p /><c>[CanBeNull]</c></param>
            <param name="targetTypes">The array of types to convert to. The array length indicates the number and types of values that are suggested for the method to return.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            An array of values that have been converted from the target value back to the source values.
            </returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.ConfirmedCommandConverter">
            <summary>
            A converter to use in <see cref="T:System.Windows.Input.ICommand" /> bindings to intercept or filter command executions in the view layer in MVVM applications.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ConfirmedCommandConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            Null and UnSet are unchanged.
            <p /><c>[CanBeNull]</c></summary>
            <param name="value">The value produced by the binding source.<p /><c>[CanBeNull]</c></param>
            <param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value.
            </returns>
        </member>
        <member name="E:TomsToolbox.Wpf.Converters.ConfirmedCommandConverter.Executing">
            <summary>
            Occurs when the command is being executed. The view can connect to this event to e.g. show a message box or modify the command parameter.
            </summary>
        </member>
        <member name="E:TomsToolbox.Wpf.Converters.ConfirmedCommandConverter.Error">
            <summary>
            Occurs when an exception is raised during command execution.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.ConfirmedCommandEventArgs">
            <summary>
            Event arguments for the <see cref="E:TomsToolbox.Wpf.Converters.ConfirmedCommandConverter.Executing" /> event.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Converters.ConfirmedCommandEventArgs.Parameter">
            <summary>
            Gets or sets the parameter that will be passed to the command when it's executed.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.CoordinatesToPointConverter">
            <summary>
            Converts WGS-84 coordinates (<see cref="T:TomsToolbox.Wpf.Coordinates" /> ) into normalized logical XY coordinates (<see cref="T:System.Windows.Point" />) in the range 0..1 and back.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.CoordinatesToPointConverter.Default">
            <summary>
            The singleton instance of the converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.CoordinatesToPointConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            Null and UnSet are unchanged.
            <p /><c>[NotNull]</c></summary>
            <param name="value">The value produced by the binding source.<p /><c>[CanBeNull]</c></param>
            <param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.CoordinatesToPointConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            <p /><c>[NotNull]</c></summary>
            <param name="value">The value that is produced by the binding target.<p /><c>[CanBeNull]</c></param>
            <param name="targetType">The type to convert to.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.CoordinatesToPointConverter.Convert(System.Object)">
            <summary>
            Converts WGS-84 coordinates (<see cref="T:TomsToolbox.Wpf.Coordinates" /> ) into normalized logical XY coordinates (<see cref="T:System.Windows.Point" />) in the range 0..1 and back.
            <p /><c>[NotNull]</c></summary>
            <param name="value">The <see cref="T:TomsToolbox.Wpf.Coordinates" /> or <see cref="T:System.Windows.Point" /> value.<p /><c>[CanBeNull]</c></param>
            <returns>The <see cref="T:TomsToolbox.Wpf.Coordinates" /> or <see cref="T:System.Windows.Point" /> value.</returns>
            <exception cref="T:System.InvalidOperationException">Value is neither a Point nor a Coordinates structure.</exception>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.DoubleToThicknessConverter">
            <summary>
            Converts a single number to a uniform <see cref="T:System.Windows.Thickness" />, optionally multiplying with the thickness passed as converter parameter.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.DoubleToThicknessConverter.Default">
            <summary>
            The singleton instance of the converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.DoubleToThicknessConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            Null and UnSet are unchanged.
            <p /><c>[NotNull]</c></summary>
            <returns>
            A converted value.
            </returns>
            <param name="value">The value produced by the binding source.<p /><c>[CanBeNull]</c></param>
            <param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.EnumToBooleanConverter">
            <summary>
            Tests if an enum value matches one of the given values provides as the converter parameter. 
            If the enum has a <see cref="T:System.FlagsAttribute" />, the match is done with the logic "is any flag set".
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.EnumToBooleanConverter.Default">
            <summary>
            The singleton instance of the converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.EnumToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            UnSet is unchanged, null returns false.
            <p /><c>[NotNull]</c></summary>
            <returns>
            A converted value.
            </returns>
            <param name="value">The value produced by the binding source.<p /><c>[CanBeNull]</c></param><param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param><param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param><param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.EnumToBooleanConverter.Convert(System.Object,System.String)">
            <summary>
            Converts the specified enum value into a boolean.
            </summary>
            <param name="value">The enum value.<p /><c>[CanBeNull]</c></param>
            <param name="matches">A comma separated list of enum names to match.<p /><c>[NotNull]</c></param>
            <returns>True if the value matches one of the enum names.</returns>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.EnumToValuesConverter">
            <summary>
            Converts the specified enum-type into an array of the individual enum values.
            The converter parameter can be used to specify a comma separated exclude list.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.EnumToValuesConverter.Default">
            <summary>
            The singleton instance of the converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.EnumToValuesConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            Null and UnSet are unchanged.
            <p /><c>[NotNull]</c></summary>
            <returns>
            A converted value.
            </returns>
            <param name="value">The value produced by the binding source.<p /><c>[CanBeNull]</c></param><param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param><param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param><param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.EnumToValuesConverter.Convert(System.Type,System.String)">
            <summary>
            Converts the specified enum-type into an array of the individual enum values.
            <p /><c>[NotNull, ItemNotNull]</c></summary>
            <param name="type">The enum type.<p /><c>[CanBeNull]</c></param>
            <param name="excluded">A comma separated list of values to exclude.<p /><c>[CanBeNull]</c></param>
            <returns>An array of the enum's values.</returns>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.ImageSourceToImageConverter">
            <summary>
            Converts an <see cref="T:System.Windows.Media.ImageSource" /> into an <see cref="T:System.Windows.Controls.Image" />. 
            Needed to assign an image source to an item via a style setter, e.g. <see cref="P:System.Windows.Controls.MenuItem.Icon" />.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.ImageSourceToImageConverter.Default">
            <summary>
            The singleton instance of the converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ImageSourceToImageConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            Null and UnSet are unchanged.
            <p /><c>[NotNull]</c></summary>
            <param name="value">The value produced by the binding source.<p /><c>[CanBeNull]</c></param>
            <param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value.
            </returns>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.LogicalOperation">
            <summary>
            The logical operation performed by the <see cref="T:TomsToolbox.Wpf.Converters.LogicalMultiValueConverter" />
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.LogicalOperation.And">
            <summary>
            The logical AND operation; returns true if all items are true.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.LogicalOperation.Or">
            <summary>
            The logical OR operation; returns true if any item is true.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.LogicalMultiValueConverter">
            <summary>
            A <see cref="T:System.Windows.Data.IMultiValueConverter" /> that performs a logical operation on all items.
            </summary>
            <remarks>
            All items must be convertible to boolean.
            </remarks>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.LogicalMultiValueConverter.And">
            <summary>
            The default logical AND converter. 
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.LogicalMultiValueConverter.Or">
            <summary>
            The default logical OR converter. 
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Converters.LogicalMultiValueConverter.Operation">
            <summary>
            Gets or sets the operation to be performed on all items.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.LogicalMultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts source values to a value for the binding target. The data binding engine calls this method when it propagates the values from source bindings to the binding target.
            An input value of null will return null, whereas if the input array contains UnSet then UnSet will be returned.
            <p /><c>[NotNull]</c></summary>
            <param name="values">The array of values that the source bindings in the <see cref="T:System.Windows.Data.MultiBinding" /> produces. The value <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> indicates that the source binding has no value to provide for conversion.</param>
            <param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value.
            </returns>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.MultiValueConverter">
            <summary>
            A base class for multi-value converters performing pre-check of value and error handling.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.MultiValueConverter.Convert(System.Object[],System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            <p /><c>[CanBeNull]</c></summary>
            <param name="values">The values produced by the binding source.<p /><c>[NotNull, ItemCanBeNull]</c></param>
            <param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.MultiValueConverter.ConvertBack(System.Object,System.Type[],System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            <p /><c>[CanBeNull, ItemCanBeNull]</c></summary>
            <param name="value">The value that is produced by the binding target.<p /><c>[NotNull]</c></param>
            <param name="targetTypes">The types to convert to.<p /><c>[CanBeNull, ItemCanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.InvalidOperationException">ConvertBack is not supported by this converter.</exception>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.MultiValueConverter.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">A service provider helper that can provide services for the markup extension.</param>
            <returns>
            The object value to set on the property where the extension is applied.
            </returns>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.ObjectToAttributeConverter`1">
            <summary>
            Converts an object to a value derived from an attribute of the object.
            </summary>
            <typeparam name="T">The attribute to look up.</typeparam>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ObjectToAttributeConverter`1.InternalConvert(System.Object,System.Type,System.Func{`0,System.String})">
            <summary>
            Does the conversion.
            <p /><c>[NotNull]</c></summary>
            <param name="value">The value.<p /><c>[CanBeNull]</c></param>
            <param name="enumType">An optional type of an enum to support converting <see cref="T:System.Enum" /> where the value is given as a number or string.<p /><c>[CanBeNull]</c></param>
            <param name="selector">The selector to get the desired value from the attribute.<p /><c>[NotNull]</c></param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ObjectToAttributeConverter`1.InternalConvert(System.Object,System.Type,System.Func{`0,System.String},System.Func{`0,System.Boolean})">
            <summary>
            Does the conversion.
            <p /><c>[NotNull]</c></summary>
            <param name="value">The value.<p /><c>[CanBeNull]</c></param>
            <param name="enumType">An optional type of an enum to support converting <see cref="T:System.Enum" /> where the value is given as a number or string.<p /><c>[CanBeNull]</c></param>
            <param name="selector">The selector to get the desired value from the attribute.<p /><c>[NotNull]</c></param>
            <param name="predicate">A predicate to search for a specific attribute.<p /><c>[NotNull]</c></param>
            <returns>
            The converted value.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ObjectToAttributeConverter`1.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            <p /><c>[CanBeNull]</c></summary>
            <returns>
            A converted value.
            </returns>
            <param name="value">The value produced by the binding source.<p /><c>[CanBeNull]</c></param><param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param><param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param><param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.ObjectToDescriptionConverter">
             <summary>
             Takes an object and returns the description taken from it's <see cref="T:System.ComponentModel.DescriptionAttribute" />
             </summary>
             <example><code language="C#">
             enum Items
             {
                 [Description("This is item 1")]
                 Item1,
                 [Description("This is item 2")]
                 Item2
             }
            
             Assert.Equals("This is item 1", ObjectToDescriptionConverter.Convert(Items.Item1));
             </code></example>
             <remarks>Works with any object; for enum types the attribute of the field is returned.</remarks>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.ObjectToDescriptionConverter.Default">
            <summary>
            The singleton instance of the converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ObjectToDescriptionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            UnSet is unchanged, null becomes an empty string.
            <p /><c>[NotNull]</c></summary>
            <param name="value">The value produced by the binding source.<p /><c>[CanBeNull]</c></param>
            <param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ObjectToDescriptionConverter.Convert(System.Object)">
            <summary>
            Converts the specified value to the description taken from it's <see cref="T:System.ComponentModel.DescriptionAttribute" />
            <p /><c>[NotNull]</c></summary>
            <param name="value">The value.<p /><c>[CanBeNull]</c></param>
            <returns>The description of the value.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ObjectToDescriptionConverter.Convert(System.Object,System.Type)">
            <summary>
            Converts the specified value to the description taken from it's <see cref="T:System.ComponentModel.DescriptionAttribute" />
            <p /><c>[NotNull]</c></summary>
            <param name="value">The value.<p /><c>[CanBeNull]</c></param>
            <param name="enumType">An optional type of an enum to support converting <see cref="T:System.Enum" /> where the value is given as a number or string.<p /><c>[CanBeNull]</c></param>
            <returns>The description of the value.</returns>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.ObjectToDisplayNameConverter">
             <summary>
             Takes an object and returns the display name taken from it's <see cref="T:System.ComponentModel.DisplayNameAttribute" />
             </summary>
             <example><code language="C#">
             enum Items
             {
                 [DisplayName("This is item 1")]
                 Item1,
                 [DisplayName("This is item 2")]
                 Item2
             }
            
             Assert.Equals("This is item 1", ObjectToDisplayNameConverter.Convert(Items.Item1));
             </code></example>
             <remarks>Works with any object; for enum types the attribute of the field is returned.</remarks>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.ObjectToDisplayNameConverter.Default">
            <summary>
            The singleton instance of the converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ObjectToDisplayNameConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            UnSet is unchanged, null becomes an empty string.
            <p /><c>[NotNull]</c></summary>
            <param name="value">The value produced by the binding source.<p /><c>[CanBeNull]</c></param>
            <param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ObjectToDisplayNameConverter.Convert(System.Object)">
            <summary>
            Converts the specified value to the display name taken from it's <see cref="T:System.ComponentModel.DisplayNameAttribute" />
            <p /><c>[NotNull]</c></summary>
            <param name="value">The value.<p /><c>[CanBeNull]</c></param>
            <returns>The display name of the value.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ObjectToDisplayNameConverter.Convert(System.Object,System.Type)">
            <summary>
            Converts the specified value to the display name taken from it's <see cref="T:System.ComponentModel.DisplayNameAttribute" />
            <p /><c>[NotNull]</c></summary>
            <param name="value">The value.<p /><c>[CanBeNull]</c></param>
            <param name="enumType">An optional type of an enum to support converting <see cref="T:System.Enum" /> where the value is given as a number or string.<p /><c>[CanBeNull]</c></param>
            <returns>The display name of the value.</returns>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.ObjectToTextConverter">
             <summary>
             Takes an object and returns the text taken from it's <see cref="T:TomsToolbox.Essentials.TextAttribute" />
             </summary>
             <example><code>
             enum Items
             {
                 [Text("key2", "This is other text on item 1")]
                 [Text("key1", "This is item 1")]
                 Item1,
                 [Text("key1", "This is item 2")]
                 Item2
             }
            
             Assert.AreEqual("This is item 1", ObjectToTextConverter.Convert("key1", Items.Item1));
             </code></example>
             <remarks>Works with any object; for enum types the attribute of the field is returned. When used via the <see cref="T:System.Windows.Data.IValueConverter" /> interface, the key is specified as the converter parameter.</remarks>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.ObjectToTextConverter.Default">
            <summary>
            The singleton instance of the converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Converters.ObjectToTextConverter.Key">
            <summary>
            Gets or sets the key used to select the <see cref="T:TomsToolbox.Essentials.TextAttribute" />
            The converter parameter can override this value.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ObjectToTextConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            <p /><c>[CanBeNull]</c></summary>
            <param name="value">The value produced by the binding source.<p /><c>[CanBeNull]</c></param>
            <param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ObjectToTextConverter.Convert(System.Object,System.Object)">
            <summary>
            Converts the specified value to the text taken from it's <see cref="T:TomsToolbox.Essentials.TextAttribute" />
            <p /><c>[CanBeNull]</c></summary>
            <param name="key">The key.<p /><c>[CanBeNull]</c></param>
            <param name="value">The value.<p /><c>[CanBeNull]</c></param>
            <returns>The text of the value.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ObjectToTextConverter.Convert(System.Object,System.Object,System.Type)">
            <summary>
            Converts the specified value to the text taken from it's <see cref="T:TomsToolbox.Essentials.TextAttribute" />
            <p /><c>[CanBeNull]</c></summary>
            <param name="key">The key.<p /><c>[CanBeNull]</c></param>
            <param name="value">The value.<p /><c>[CanBeNull]</c></param>
            <param name="enumType">An optional type of an enum to support converting <see cref="T:System.Enum" /> where the value is given as a number or string.<p /><c>[CanBeNull]</c></param>
            <returns>The text of the value.</returns>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.ReplaceTextConverter">
            <summary>
            A converter that converts the specified value by replacing text using a regular expression.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Converters.ReplaceTextConverter.Pattern">
            <summary>
            Gets or sets the regular expression to find.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Converters.ReplaceTextConverter.Replacement">
            <summary>
            Gets or sets the text to replace.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Converters.ReplaceTextConverter.Options">
            <summary>
            Gets or sets the <see cref="T:System.Text.RegularExpressions.RegexOptions" /> used to find the string.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Converters.ReplaceTextConverter.ReplaceAll">
            <summary>
            Gets or sets a value indicating whether to replace all found instances or only the first.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ReplaceTextConverter.Convert(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.Boolean)">
            <summary>
            Converts the specified value by replacing text using a regular expression.
            <p /><c>[CanBeNull]</c></summary>
            <param name="value">The value to convert.<p /><c>[CanBeNull]</c></param>
            <param name="pattern">The regular expression to find.<p /><c>[CanBeNull]</c></param>
            <param name="replacement">The replacing text.<p /><c>[CanBeNull]</c></param>
            <param name="options">The options for the regular expression.</param>
            <param name="replaceAll">if set to <c>true</c> all occurrences will be replaces; otherwise only the first.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ReplaceTextConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            Null and UnSet are unchanged.
            <p /><c>[CanBeNull]</c></summary>
            <param name="value">The value produced by the binding source.<p /><c>[CanBeNull]</c></param>
            <param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value.
            </returns>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.StringToObjectConverter">
            <summary>
            A <see cref="T:System.Windows.Data.IValueConverter" /> wrapping a <see cref="T:System.ComponentModel.TypeConverter" />
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.StringToObjectConverter.Default">
            <summary>
            The singleton instance of the converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Converters.StringToObjectConverter.TypeConverterType">
            <summary>
            Gets or sets the type of the type converter to use.
            If no type is specified, the type converter will be deduced form the target type.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.StringToObjectConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. Null or UnSet are unchanged.
            <p /><c>[CanBeNull]</c></summary>
            <returns>
            A converted value.
            </returns>
            <param name="value">The value produced by the binding source.<p /><c>[CanBeNull]</c></param>
            <param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.StringToObjectConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            <p /><c>[CanBeNull]</c></summary>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <param name="value">The value that is produced by the binding target.<p /><c>[CanBeNull]</c></param>
            <param name="targetType">The type to convert to.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.ThicknessMultiplyConverter">
            <summary>
            Multiplies all corresponding members of two <see cref="T:System.Windows.Thickness" />. structures. 
            The first structure is passed as the converter value, the second as the converter parameter.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.ThicknessMultiplyConverter.Default">
            <summary>
            The singleton instance of the converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ThicknessMultiplyConverter.Multiply(System.Windows.Thickness,System.Windows.Thickness)">
            <summary>
            Multiplies all corresponding members of both structures.
            </summary>
            <param name="first">The first.</param>
            <param name="second">The second.</param>
            <returns>The multiplied thickness.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ThicknessMultiplyConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value. 
            Null or UnSet are unchanged, a Thickness is multiplied by the Thickness in the parameter.
            <p /><c>[NotNull]</c></summary>
            <returns>
            A converted value.
            </returns>
            <param name="value">The value produced by the binding source.<p /><c>[CanBeNull]</c></param><param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param><param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param><param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ThicknessMultiplyConverter.Convert(System.Object,System.Object)">
            <summary>
            Converts the specified values.
            <p /><c>[NotNull]</c></summary>
            <param name="value">The value.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The parameter.<p /><c>[CanBeNull]</c></param>
            <returns>The multiplied thickness.</returns>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.UnaryOperation">
            <summary>
            Unary operations supported by the <see cref="T:TomsToolbox.Wpf.Converters.UnaryOperationConverter" />
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.UnaryOperation.Negation">
            <summary>
            The negation operation; either a boolean or atithmetic negation.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.UnaryOperationConverter">
            <summary>
            Applies the <see cref="P:TomsToolbox.Wpf.Converters.UnaryOperationConverter.Operation" /> on the value.<para />
            Either a boolean or an arithmetic operation for built in types, or the negation defined by the objects negation operator overload.<para />
            </summary>
            <returns>
            If the conversions succeed, the result of the operation is returned. If any error occurs, the result is <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.
            </returns>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.UnaryOperationConverter.Negation">
            <summary>
            The default negation converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Converters.UnaryOperationConverter.Operation">
            <summary>
            Gets or sets the operation performed by this converter.<para />
            Even though this converter supports only one operation, the property is present to have the same look and feel like the <see cref="T:TomsToolbox.Wpf.Converters.BinaryOperationConverter" />.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.UnaryOperationConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            <p /><c>[CanBeNull]</c></summary>
            <param name="value">The value produced by the binding source.<p /><c>[CanBeNull]</c></param>
            <param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.UnaryOperationConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            <p /><c>[CanBeNull]</c></summary>
            <param name="value">The value that is produced by the binding target.<p /><c>[CanBeNull]</c></param>
            <param name="targetType">The type to convert to.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.InvalidOperationException">ConvertBack is not supported by this converter.</exception>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.ValueConverter">
            <summary>
            A base class for value converters performing pre-check of value and error handling.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Converters.ValueConverter.ConvertNullValue">
            <summary>
            Gets or sets the <c>null</c> value, which is returned whenever the value to convert is <c>null</c>; the default is <c>null</c>.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Converters.ValueConverter.ConvertUnsetValue">
            <summary>
            Gets or sets the <c>unset</c> value, which is returned whenever the value to convert is <see cref="F:System.Windows.DependencyProperty.UnsetValue" />; the default is <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Converters.ValueConverter.ConvertErrorValue">
            <summary>
            Gets or sets the <c>error</c> value, which is returned whenever the value to convert produces an error; the default is <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Converters.ValueConverter.ConvertBackNullValue">
            <summary>
            Gets or sets the <c>null</c> value, which is returned whenever the value to convert back is <c>null</c>; the default is <c>null</c>.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Converters.ValueConverter.ConvertBackUnsetValue">
            <summary>
            Gets or sets the <c>unset</c> value, which is returned whenever the value to convert back is <see cref="F:System.Windows.DependencyProperty.UnsetValue" />; the default is <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Converters.ValueConverter.ConvertBackErrorValue">
            <summary>
            Gets or sets the <c>error</c> value, which is returned whenever the value to convert back produces an error; the default is <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            <p /><c>[CanBeNull]</c></summary>
            <param name="value">The value produced by the binding source.<p /><c>[NotNull]</c></param>
            <param name="targetType">The type of the binding target property.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ValueConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            <p /><c>[CanBeNull]</c></summary>
            <param name="value">The value that is produced by the binding target.<p /><c>[NotNull]</c></param>
            <param name="targetType">The type to convert to.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
            <exception cref="T:System.InvalidOperationException">ConvertBack is not supported by this converter.</exception>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ValueConverter.ProvideValue(System.IServiceProvider)">
            <summary>
            When implemented in a derived class, returns an object that is provided as the value of the target property for this markup extension.
            </summary>
            <param name="serviceProvider">A service provider helper that can provide services for the markup extension.</param>
            <returns>
            The object value to set on the property where the extension is applied.
            </returns>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.ValueConverterExtensions">
            <summary>
            Extension methods for value converters.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.ValueConverterExtensions.ConverterErrorNumber">
            <summary>
            The error number shown in the output.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ValueConverterExtensions.TraceError(System.Windows.Data.IValueConverter,System.String,System.String)">
            <summary>
            Traces an error for the specified converter.
            </summary>
            <param name="converter">The converter.<p /><c>[NotNull]</c></param>
            <param name="message">The message.<p /><c>[NotNull]</c></param>
            <param name="methodName">Name of the calling method.<p /><c>[NotNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.ValueConverterExtensions.TraceError(System.Windows.Data.IMultiValueConverter,System.String,System.String)">
            <summary>
            Traces an error for the specified converter.
            </summary>
            <param name="converter">The converter.<p /><c>[NotNull]</c></param>
            <param name="message">The message.<p /><c>[NotNull]</c></param>
            <param name="methodName">Name of the calling method.<p /><c>[NotNull]</c></param>
        </member>
        <member name="T:TomsToolbox.Wpf.Converters.VisibilityToBooleanConverter">
            <summary>
            The counterpart of BooleanToVisibilityConverter.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Converters.VisibilityToBooleanConverter.Default">
            <summary>
            The singleton instance of the converter.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Converters.VisibilityToBooleanConverter.VisibilityWhenBooleanIsFalse">
            <summary>
            The visibility value to be used when converting back from a false boolean value. Defaults to Collapsed.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.VisibilityToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            <p /><c>[NotNull]</c></summary>
            <param name="value">The value that is produced by the binding target.<p /><c>[CanBeNull]</c></param>
            <param name="targetType">The type to convert to.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Converters.VisibilityToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            <p /><c>[NotNull]</c></summary>
            <param name="value">The value that is produced by the binding target.<p /><c>[CanBeNull]</c></param>
            <param name="targetType">The type to convert to.<p /><c>[CanBeNull]</c></param>
            <param name="parameter">The converter parameter to use.<p /><c>[CanBeNull]</c></param>
            <param name="culture">The culture to use in the converter.<p /><c>[CanBeNull]</c></param>
            <returns>
            A converted value.
            </returns>
        </member>
        <member name="T:TomsToolbox.Wpf.Coordinates">
            <summary>
            WGS-84 coordinates in degrees.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Coordinates.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Coordinates" /> structure.
            </summary>
            <param name="latitude">The latitude.</param>
            <param name="longitude">The longitude.</param>
        </member>
        <member name="P:TomsToolbox.Wpf.Coordinates.Latitude">
            <summary>
            Gets or sets the latitude in degrees.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Coordinates.Longitude">
            <summary>
            Gets or sets the longitude in degrees.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Coordinates.op_Implicit(TomsToolbox.Wpf.Coordinates)~System.Windows.Point">
            <summary>
            Converts a point from WGS-84 coordinates (in degrees) into logical XY coordinates in the range 0..1.
            </summary>
            <param name="coordinates">The WGS-84 coordinates.</param>
            <returns>The logical coordinates</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Coordinates.op_Implicit(System.Windows.Point)~TomsToolbox.Wpf.Coordinates">
            <summary>
            Converts a point from logical coordinates in the range 0..1 into latitude/longitude WGS-84 coordinates (in degrees).
            </summary>
            <param name="point">The logical coordinates.</param>
            <returns>The WGS-84 coordinates</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Coordinates.CoordinatesToPoint(TomsToolbox.Wpf.Coordinates)">
            <summary>
            Converts a point from latitude/longitude WGS-84 coordinates (in degrees) into logical XY coordinates in the range 0..1
            </summary>
            <param name="coordinates">The coordinates.</param>
            <returns>The logical point</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Coordinates.PointToCoordinates(System.Windows.Point)">
            <summary>
            Converts a point from logical coordinates in the range 0..1 into latitude/longitude WGS-84 coordinates (in degrees).
            </summary>
            <param name="value">The logical point value.</param>
            <returns>The coordinates</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Coordinates.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Coordinates.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.<p /><c>[CanBeNull]</c></param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Coordinates.Equals(TomsToolbox.Wpf.Coordinates)">
            <summary>
            Determines whether the specified <see cref="T:TomsToolbox.Wpf.Coordinates" /> is equal to this instance.
            </summary>
            <param name="other">The <see cref="T:TomsToolbox.Wpf.Coordinates" /> to compare with this instance.</param>
            <returns><c>true</c> if the specified <see cref="T:TomsToolbox.Wpf.Coordinates" /> is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Coordinates.op_Equality(TomsToolbox.Wpf.Coordinates,TomsToolbox.Wpf.Coordinates)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Coordinates.op_Inequality(TomsToolbox.Wpf.Coordinates,TomsToolbox.Wpf.Coordinates)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left object to compare.</param>
            <param name="right">The right object to compare.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Coordinates.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="T:TomsToolbox.Wpf.DateTimeSource">
            <summary>
            Provides values for date and time suitable for bindings.
            </summary>
            <remarks>
            This expression in XAML would be static, since the Source is never updated and would always have 
            it's initial value, <see cref="M:System.Windows.Data.BindingExpression.UpdateTarget" /> won't have any effect.
            <para />
            MyDayOfWeek="{Binding Path=DayOfWeek, Source={x:Static system:DateTime.Today}}"
            <para />
            Using <see cref="T:TomsToolbox.Wpf.DateTimeSource" /> instead, <see cref="M:System.Windows.Data.BindingExpression.UpdateTarget" /> will work, 
            and MyDayOfWeek will be updated with the actual value:
            <para />
            MyDayOfWeek="{Binding Path=Today.DayOfWeek, Source={x:Static toms:DateTimeSource.Default}}"
            <para />
            Another usage is to use a local instance with timer triggered property change events:
            <code language="xaml">
            <![CDATA[
            <FrameworkElement.Resources>
              <toms:DateTimeSource x:Key="TimeSource" UpdateInterval="00:00:01" />
            </FrameworkElement.Resources>
            ...
            <TextBox Text={Binding Path=Now, Source={StaticResource TimeSource}}" />
            ]]>
            </code>
            </remarks>
        </member>
        <member name="F:TomsToolbox.Wpf.DateTimeSource.Default">
            <summary>
            The default singleton object. Use this as a source for binding that supports manual updating.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.DateTimeSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.DateTimeSource" /> class.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.DateTimeSource.UpdateInterval">
            <summary>
            Gets or sets the interval in which the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event is raised for all properties.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.DateTimeSource.Now">
            <summary>
            Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the local time.
            </summary>
            <returns>
            A <see cref="T:System.DateTime" /> whose value is the current local date and time.
            </returns>
        </member>
        <member name="P:TomsToolbox.Wpf.DateTimeSource.Today">
            <summary>
            Gets the current date.
            </summary>
            <returns>
            A <see cref="T:System.DateTime" /> set to today's date, with the time component set to 00:00:00.
            </returns>
        </member>
        <member name="P:TomsToolbox.Wpf.DateTimeSource.UtcNow">
            <summary>
            Gets a <see cref="T:System.DateTime" /> object that is set to the current date and time on this computer, expressed as the Coordinated Universal Time (UTC).
            </summary>
            <returns>
            A <see cref="T:System.DateTime" /> whose value is the current UTC date and time.
            </returns>
        </member>
        <member name="E:TomsToolbox.Wpf.DateTimeSource.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="M:TomsToolbox.Wpf.DateTimeSource.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:TomsToolbox.Wpf.DateTimeSource" /> class.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.DelegateCommand`1">
            <summary>
            A simple, straight forward delegate command implementation. For usage see MVVM concepts.
            </summary>
            <typeparam name="T">The type of the command parameter.</typeparam>
        </member>
        <member name="M:TomsToolbox.Wpf.DelegateCommand`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.DelegateCommand`1" /> class.
            <para />
            No callback is initially set, so they must be set via the property setters. This usage generates easy readable code even if the delegates are inlined.
            </summary>
            <example><code language="C#"><![CDATA[
            public ICommand DeleteCommand
            {
                get
                {
                    return new DelegateCommand<Item>
                    {
                        CanExecuteCallback = item =>
                        {
                            return IsSomethingSelected(item);
                        },
                        ExecuteCallback = item =>
                        {
                            if (IsSomehingSelected(item))
                            {
                                DelteTheSelection();
                            }
                        }
                    };
                }
            }
            ]]></code></example>
        </member>
        <member name="M:TomsToolbox.Wpf.DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.DelegateCommand`1" /> class with the execute callback.
            <para />
            This version generates more compact code; not recommended for in-line delegates.
            </summary>
            <param name="executeCallback">The default execute callback.<p /><c>[CanBeNull]</c></param>
            <example><code language="C#"><![CDATA[
            public ICommand AboutCommand
            {
                get
                {
                    return new DelegateCommand<Item>(item => ShowAboutBox(item));
                }
            }
            ]]></code></example>
        </member>
        <member name="M:TomsToolbox.Wpf.DelegateCommand`1.#ctor(System.Predicate{`0},System.Action{`0})">
             <summary>
             Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.DelegateCommand`1" /> class.
             </summary>
             <param name="canExecuteCallback">The default can execute callback.<p /><c>[CanBeNull]</c></param>
             <param name="executeCallback">The default execute callback.<p /><c>[CanBeNull]</c></param>
             <example><code language="C#"><![CDATA[
             public ICommand EditCommand
             {
                 get
                 {
                     return new DelegateCommand<Item>(CanEdit, Edit);
                 }
             }
            
             public bool CanEdit(Item param)
             {
                 .....
             ]]></code></example>
        </member>
        <member name="P:TomsToolbox.Wpf.DelegateCommand`1.CanExecuteCallback">
            <summary>
            Gets or sets the predicate to handle the ICommand.CanExecute method.
            If unset, ICommand.CanExecute will always return true if ExecuteCallback is set.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.DelegateCommand`1.ExecuteCallback">
            <summary>
            Gets or sets the action to handle the ICommand.Execute method.
            If unset, ICommand.CanExecute will always return false.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="E:TomsToolbox.Wpf.DelegateCommand`1.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
            <remarks>
            The event is forwarded to the <see cref="T:System.Windows.Input.CommandManager" />, so visuals bound to the delegate command will be updated
            in sync with the system. To explicitly refresh all visuals call CommandManager.InvalidateRequerySuggested();
            </remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.DelegateCommand`1.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.<p /><c>[CanBeNull]</c></param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.DelegateCommand`1.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="T:TomsToolbox.Wpf.DelegateCommand">
            <summary>
            A simple, straight forward delegate command implementation that does not make use of the command parameter.
            For usage see MVVM concepts.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.DelegateCommand.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.DelegateCommand" /> class.
            <para />
            No callback is initially set, so they must be set via the property setters. This usage generates easy readable code even if the delegates are inlined.
            </summary>
            <example><code language="C#"><![CDATA[
            public ICommand DeleteCommand
            {
                get
                {
                    return new DelegateCommand
                    {
                        CanExecuteCallback = delegate
                        {
                            return IsSomethingSelected();
                        },
                        ExecuteCallback = delegate
                        {
                            if (IsSomehingSelected())
                            {
                                DelteTheSelection();
                            }
                        }
                    };
                }
            }
            ]]></code></example>
        </member>
        <member name="M:TomsToolbox.Wpf.DelegateCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.DelegateCommand" /> class with the execute callback.
            <para />
            This version generates more compact code; not recommended for in-line delegates.
            </summary>
            <param name="executeCallback">The default execute callback.<p /><c>[NotNull]</c></param>
            <example><code language="C#"><![CDATA[
            public ICommand AboutCommand
            {
                get
                {
                    return new DelegateCommand(ShowAboutBox);
                }
            }
            ]]></code></example>
        </member>
        <member name="M:TomsToolbox.Wpf.DelegateCommand.#ctor(System.Func{System.Boolean},System.Action)">
             <summary>
             Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.DelegateCommand" /> class.
             </summary>
             <param name="canExecuteCallback">The default can execute callback.<p /><c>[CanBeNull]</c></param>
             <param name="executeCallback">The default execute callback.<p /><c>[CanBeNull]</c></param>
             <example><code language="C#"><![CDATA[
             public ICommand EditCommand
             {
                 get
                 {
                     return new DelegateCommand(CanEdit, Edit);
                 }
             }
            
             public bool CanEdit()
             {
                 .....
             ]]></code></example>
        </member>
        <member name="P:TomsToolbox.Wpf.DelegateCommand.CanExecuteCallback">
            <summary>
            Gets or sets the predicate to handle the ICommand.CanExecute method.
            If unset, ICommand.CanExecute will always return true if ExecuteCallback is set.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.DelegateCommand.ExecuteCallback">
            <summary>
            Gets or sets the action to handle the ICommand.Execute method.
            If unset, ICommand.CanExecute will always return false.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="E:TomsToolbox.Wpf.DelegateCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
            <remarks>
            The event is forwarded to the <see cref="T:System.Windows.Input.CommandManager" />, so visuals bound to the delegate command will be updated
            in sync with the system. To explicitly refresh all visuals call CommandManager.InvalidateRequerySuggested();
            </remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.DelegateCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.<p /><c>[CanBeNull]</c></param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.DelegateCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data to be passed, this object can be set to null.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="T:TomsToolbox.Wpf.DependencyObjectExtensions">
            <summary>
            Extensions methods to ease dealing with dependency objects.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.GetValue``1(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Gets the value of a dependency property using <see cref="M:TomsToolbox.Essentials.ObjectExtensions.SafeCast``1(System.Object)" />.
            <p /><c>[CanBeNull]</c></summary>
            <typeparam name="T"></typeparam>
            <param name="self">The dependency object from which to get the value.<p /><c>[NotNull]</c></param>
            <param name="property">The property to get.<p /><c>[NotNull]</c></param>
            <returns>The value safely casted to <typeparamref name="T" /></returns>
        </member>
        <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.Track``1(``0,System.Windows.DependencyProperty)">
            <summary>
            Tracks the changes of the specified property.
            <p /><c>[NotNull]</c></summary>
            <typeparam name="T">The type of the dependency object to track.</typeparam>
            <param name="dependencyObject">The dependency object.<p /><c>[NotNull]</c></param>
            <param name="property">The property to track.<p /><c>[NotNull]</c></param>
            <returns>The object providing the changed event.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.GetWindowHandle(System.Windows.DependencyObject)">
            <summary>
            Gets the window handle of the HwndSource hosting this item.
            </summary>
            <param name="self">The item.<p /><c>[NotNull]</c></param>
            <returns>The window handle, if the item is part of a valid visual tree, otherwise IntPtr.Zero.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.GetRootVisual(System.Windows.DependencyObject)">
            <summary>
            Gets the root visual for the item.
            <p /><c>[NotNull]</c></summary>
            <param name="item">The item to find the root visual for.<p /><c>[NotNull]</c></param>
            <returns>The root visual.</returns>
            <exception cref="T:System.ArgumentException">The item is not part of a valid visual tree.</exception>
            <remarks>
            If the item is inside a control that's embedded in a native or WindowsForms window, the root visual
            is <c>not</c> a <see cref="T:System.Windows.Window" />.
            </remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.TryGetRootVisual(System.Windows.DependencyObject)">
            <summary>
            Gets the root visual for the item.
            <p /><c>[CanBeNull]</c></summary>
            <param name="item">The item to find the root visual for.<p /><c>[NotNull]</c></param>
            <returns>The root visual if the item is part of a valid visual tree; otherwise <c>null</c>.
            </returns>
            /// <remarks>
            If the item is inside a control that's embedded in a native or WindowsForms window, the root visual
            is <c>not</c> a <see cref="T:System.Windows.Window" />.
            </remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.VisualAncestorsAndSelf(System.Windows.DependencyObject)">
            <summary>
            Returns an enumeration of elements that contains this element, and the ancestors in the visual tree of this element.
            <p /><c>[NotNull, ItemNotNull]</c></summary>
            <param name="self">The starting element.<p /><c>[NotNull]</c></param>
            <returns>The ancestor list.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.VisualAncestors(System.Windows.DependencyObject)">
            <summary>
            Returns an enumeration of the ancestor elements in the visual tree of this element.
            <p /><c>[NotNull, ItemNotNull]</c></summary>
            <param name="self">The starting element.<p /><c>[NotNull]</c></param>
            <returns>The ancestor list.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.AncestorsAndSelf(System.Windows.DependencyObject)">
            <summary>
            Returns an enumeration of elements that contain this element, and the ancestors in the logical tree of this element.
            <p /><c>[NotNull, ItemNotNull]</c></summary>
            <param name="self">The starting element.<p /><c>[NotNull]</c></param>
            <returns>The ancestor list.</returns>
            <remarks>If the start element is not in the logical tree, this method return elements from the visual tree until the first element from the logical tree is found.</remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.Ancestors(System.Windows.DependencyObject)">
            <summary>
            Returns an enumeration of the ancestor elements in the logical tree of this element.
            <p /><c>[NotNull, ItemNotNull]</c></summary>
            <param name="self">The starting element.<p /><c>[NotNull]</c></param>
            <returns>The ancestor list.</returns>
            <remarks>If the start element is not in the logical tree, this method return elements from the visual tree until the first element from the logical tree is found.</remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.TryFindAncestorOrSelf``1(System.Windows.DependencyObject)">
            <summary>
            Returns the first element in the ancestor list that implements the type of the type parameter.
            <p /><c>[CanBeNull]</c></summary>
            <typeparam name="T">The type of element to return.</typeparam>
            <param name="self">The starting element.<p /><c>[NotNull]</c></param>
            <returns>The first element matching the criteria, or null if no element was found.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.TryFindAncestorOrSelf``1(System.Windows.DependencyObject,System.Func{``0,System.Boolean})">
            <summary>
            Returns the first element in the ancestor list that implements the type of the type parameter.
            <p /><c>[CanBeNull]</c></summary>
            <typeparam name="T">The type of element to return.</typeparam>
            <param name="self">The starting element.<p /><c>[NotNull]</c></param>
            <param name="match">The predicate to match.<p /><c>[NotNull]</c></param>
            <returns>The first element matching the criteria, or null if no element was found.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.TryFindAncestor``1(System.Windows.DependencyObject)">
            <summary>
            Returns the first element in the ancestor list that implements the type of the type parameter.
            <p /><c>[CanBeNull]</c></summary>
            <typeparam name="T">The type of element to return.</typeparam>
            <param name="self">The starting element.<p /><c>[NotNull]</c></param>
            <returns>The first element matching the criteria, or null if no element was found.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.TryFindAncestor``1(System.Windows.DependencyObject,System.Func{``0,System.Boolean})">
            <summary>
            Returns the first element in the ancestor list that implements the type of the type parameter.
            <p /><c>[CanBeNull]</c></summary>
            <typeparam name="T">The type of element to return.</typeparam>
            <param name="self">The starting element.<p /><c>[NotNull]</c></param>
            <param name="match">The predicate to match.<p /><c>[NotNull]</c></param>
            <returns>The first element matching the criteria, or null if no element was found.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.VisualChildren(System.Windows.DependencyObject)">
            <summary>
            Enumerates the immediate children of the specified item.
            <p /><c>[NotNull, ItemNotNull]</c></summary>
            <param name="item">The item.<p /><c>[NotNull]</c></param>
            <returns>The immediate children of the specified item.</returns>
            <remarks>
            Uses <see cref="M:System.Windows.Media.VisualTreeHelper.GetChildrenCount(System.Windows.DependencyObject)" /> and <see cref="M:System.Windows.Media.VisualTreeHelper.GetChild(System.Windows.DependencyObject,System.Int32)" />.
            </remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.VisualChildrenAndSelf(System.Windows.DependencyObject)">
            <summary>
            Enumerates the specified item and it's immediate children.
            <p /><c>[NotNull, ItemNotNull]</c></summary>
            <param name="item">The item.<p /><c>[NotNull]</c></param>
            <returns>The specified item and it's immediate.</returns>
            <remarks>
            Uses <see cref="M:System.Windows.Media.VisualTreeHelper.GetChildrenCount(System.Windows.DependencyObject)" /> and <see cref="M:System.Windows.Media.VisualTreeHelper.GetChild(System.Windows.DependencyObject,System.Int32)" />.
            </remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.VisualDescendants(System.Windows.DependencyObject)">
            <summary>
            Enumerates all visuals descendants of the specified item.
            <p /><c>[NotNull, ItemNotNull]</c></summary>
            <param name="item">The item.<p /><c>[NotNull]</c></param>
            <returns>The descendants of the item.</returns>
            <remarks>
            Uses <see cref="M:System.Windows.Media.VisualTreeHelper.GetChildrenCount(System.Windows.DependencyObject)" /> and <see cref="M:System.Windows.Media.VisualTreeHelper.GetChild(System.Windows.DependencyObject,System.Int32)" />.
            </remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.VisualDescendantsAndSelf(System.Windows.DependencyObject)">
            <summary>
            Enumerates the specified item and all it's visual descendants.
            <p /><c>[NotNull, ItemNotNull]</c></summary>
            <param name="item">The item.<p /><c>[NotNull]</c></param>
            <returns>The specified item and all it's visual descendants.</returns>
            <remarks>
            Uses <see cref="M:System.Windows.Media.VisualTreeHelper.GetChildrenCount(System.Windows.DependencyObject)" /> and <see cref="M:System.Windows.Media.VisualTreeHelper.GetChild(System.Windows.DependencyObject,System.Int32)" />.
            </remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.DependencyObjectExtensions.GetExtent(System.Windows.Thickness)">
            <summary>
            Gets the extent of the thickness when applied to an empty rectangle.
            </summary>
            <param name="value">The thickness.</param>
            <returns>The extent of the thickness.</returns>
            <remarks>
            Returns a <see cref="T:System.Windows.Vector" /> because <see cref="T:System.Windows.Thickness" /> allows negative values.
            </remarks>
        </member>
        <member name="T:TomsToolbox.Wpf.DialogCommands">
            <summary>
            Routed commands for dialog management.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.DialogCommands.Ok">
            <summary>
            Gets the OK Dialog command.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.DialogCommands.Cancel">
            <summary>
            Gets the Cancel Dialog command.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.DialogCommands.Yes">
            <summary>
            Gets the Yes Dialog command.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.DialogCommands.No">
            <summary>
            Gets the No Dialog command.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.DialogCommands.Ignore">
            <summary>
            Gets the Ignore Dialog command.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.DialogCommands.Retry">
            <summary>
            Gets the Retry Dialog command.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.DialogCommands.Abort">
            <summary>
            Gets the Abort Dialog command.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="T:TomsToolbox.Wpf.DispatcherExtensions">
            <summary>
            Extension methods to ease usage of dispatcher calls.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.DispatcherExtensions.Invoke``1(System.Windows.Threading.Dispatcher,System.Func{``0})">
            <summary>
            Invokes the specified method in the dispatcher thread.
            <p /><c>[CanBeNull]</c></summary>
            <typeparam name="T">The return type of the method.</typeparam>
            <param name="dispatcher">The dispatcher.<p /><c>[CanBeNull]</c></param>
            <param name="method">The method.<p /><c>[NotNull]</c></param>
            <returns>The result of the method.</returns>
            <remarks>Exceptions thrown by <paramref name="method" /> are passed back to the caller and are not wrapped into a <see cref="T:System.Reflection.TargetInvocationException" />.</remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.DispatcherExtensions.Invoke(System.Windows.Threading.Dispatcher,System.Action)">
            <summary>
            Invokes the specified method in the dispatcher thread.
            </summary>
            <param name="dispatcher">The dispatcher.<p /><c>[CanBeNull]</c></param>
            <param name="method">The method.<p /><c>[NotNull]</c></param>
            <remarks>Exceptions thrown by <paramref name="method" /> are passed back to the caller and are not wrapped into a <see cref="T:System.Reflection.TargetInvocationException" />.</remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.DispatcherExtensions.BeginInvoke(System.Windows.Threading.Dispatcher,System.Action)">
            <summary>
            Invokes the specified method asynchronously in the dispatcher thread.
            <p /><c>[NotNull]</c></summary>
            <param name="dispatcher">The dispatcher.<p /><c>[NotNull]</c></param>
            <param name="method">The method.<p /><c>[NotNull]</c></param>
            <returns>The dispatcher operation to track the outcome of the call.</returns>
            <exception cref="T:System.InvalidOperationException">The dispatcher has already shut down.</exception>
        </member>
        <member name="M:TomsToolbox.Wpf.DispatcherExtensions.BeginInvoke(System.Windows.Threading.Dispatcher,System.Windows.Threading.DispatcherPriority,System.Action)">
            <summary>
            Invokes the specified method asynchronously in the dispatcher thread.
            <p /><c>[NotNull]</c></summary>
            <param name="dispatcher">The dispatcher.<p /><c>[NotNull]</c></param>
            <param name="priority">The priority to use.</param>
            <param name="method">The method.<p /><c>[NotNull]</c></param>
            <returns>The dispatcher operation to track the outcome of the call.</returns>
            <exception cref="T:System.InvalidOperationException">The dispatcher has already shut down.</exception>
        </member>
        <member name="M:TomsToolbox.Wpf.DispatcherExtensions.Restart(System.Windows.Threading.DispatcherTimer)">
            <summary>
            Restarts the specified timer.
            </summary>
            <param name="timer">The timer.<p /><c>[NotNull]</c></param>
        </member>
        <member name="T:TomsToolbox.Wpf.DispatcherThrottle">
            <summary>
            Implements a simple throttle that uses the dispatcher to delay the target action.<para />
            Calling <see cref="M:TomsToolbox.Wpf.DispatcherThrottle.Tick" /> multiple times will result in on single call to the action as soon as
            the dispatcher of the thread that created the throttle is dispatching calls of the specified priority.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.DispatcherThrottle.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.DispatcherThrottle" /> class.
            </summary>
            <param name="target">The target action to invoke when the throttle condition is hit.<p /><c>[NotNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.DispatcherThrottle.#ctor(System.Windows.Threading.DispatcherPriority,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.DispatcherThrottle" /> class.
            </summary>
            <param name="priority">The priority of the dispatcher.</param>
            <param name="target">The target action to invoke when the throttle condition is hit.<p /><c>[NotNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.DispatcherThrottle.Tick">
            <summary>
            Ticks this instance to trigger the throttle.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.DoubleClickPanel">
            <summary>
            A panel that raises MouseDoubleClick events like the <see cref="T:System.Windows.Controls.Control" />.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.DoubleClickPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.DoubleClickPanel" /> class.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.DoubleClickPanel.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="F:System.Windows.Controls.Control.MouseDoubleClickEvent" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> instance containing the event data.<p /><c>[NotNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.DoubleClickPanel.OnPreviewMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="F:System.Windows.Controls.Control.PreviewMouseDoubleClickEvent" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> instance containing the event data.<p /><c>[NotNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.DoubleClickPanel.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event is raised on this element. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
        </member>
        <member name="M:TomsToolbox.Wpf.DoubleClickPanel.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
        </member>
        <member name="M:TomsToolbox.Wpf.DoubleClickPanel.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was pressed.</param>
        </member>
        <member name="M:TomsToolbox.Wpf.DoubleClickPanel.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was pressed.</param>
        </member>
        <member name="T:TomsToolbox.Wpf.ILayer">
            <summary>
            Interface to be implemented by visual layers that need to be forced to invalidate their layout independent of the WPF render cycle.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.ILayer.Invalidate">
            <summary>
            Invalidates the layout of this instance.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.ImageExtensions">
            <summary>
            Extension for the <see cref="T:System.Windows.Controls.Image" /> class:
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.ImageExtensions.GetResourceKey(System.Windows.Controls.Image)">
            <summary>
            Gets the resource key from which to load the image source.
            <p /><c>[CanBeNull]</c></summary>
            <param name="obj">The image.<p /><c>[NotNull]</c></param>
            <returns>The resource key.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.ImageExtensions.SetResourceKey(System.Windows.Controls.Image,System.Object)">
            <summary>
            Sets the resource key from which to load the image source.
            </summary>
            <param name="obj">The image.<p /><c>[NotNull]</c></param>
            <param name="value">The resource key.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="F:TomsToolbox.Wpf.ImageExtensions.ResourceKeyProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.ImageExtensions.ResourceKey" /> dependency property.
            <p /><c>[NotNull]</c></summary>
            <AttachedPropertyComments>
            <summary>Allows to specify a resource key instead of an Uri as the source from which the image will be loaded.</summary>
            </AttachedPropertyComments>
        </member>
        <member name="T:TomsToolbox.Wpf.Interactivity.HitTest">
            <summary>
            Hit test values for the <see cref="T:TomsToolbox.Wpf.Interactivity.NcHitTestEventArgs" />
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.Nowhere">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.Client">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.Caption">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.SysMenu">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.GrowBox">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.Size">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.Menu">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.HScroll">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.VScroll">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.MinButton">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.MaxButton">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.Left">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.Right">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.Top">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.TopLeft">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.TopRight">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.Bottom">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.BottomLeft">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.BottomRight">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.Border">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.Object">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.Close">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.Help">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.Error">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.HitTest.Transparent">
            <summary>See documentation of WM_NCHITTEST</summary>
        </member>
        <member name="T:TomsToolbox.Wpf.Interactivity.NcHitTestEventArgs">
            <summary>
            Event args for the <see cref="F:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.NcHitTestEvent" /> event.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.NcHitTestEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Interactivity.NcHitTestEventArgs" /> class.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Interactivity.NcHitTestEventArgs.HitTest">
            <summary>
            Gets or sets the hit test result.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior">
            <summary>
            Behavior to emulate correct non client area handling for transparent windows that draw their own border and caption.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.BorderSize">
            <summary>
            Gets or sets the size of the border used to size the window.
            </summary>
            <value>
            The size of the border.
            </value>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.BorderSizeProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.BorderSize" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.CornerSize">
            <summary>
            Gets or sets the size of a corner used to size the window.
            </summary>
            <value>
            The size of the corner.
            </value>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.CornerSizeProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.CornerSize" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.HasGlassFrame">
            <summary>
            Gets or sets a value indicating whether this window has a glass frame.
            </summary>
            <value>
            <c>true</c> if this window has a glass frame; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.HasGlassFrameProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.HasGlassFrame" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.GetDisableGlassFrame(System.Windows.Window)">
            <summary>
            Gets the value indicating if the glass frame using DWM composition for this window should be disabled.
            </summary>
            <param name="window">The window.</param>
            <returns><c>true</c> if the glass frame is disabled; otherwise <c>false</c></returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.SetDisableGlassFrame(System.Windows.Window,System.Boolean)">
            <summary>
            Sets the value indicating if the glass frame using DWM composition for this window should be disabled.
            </summary>
            <param name="window">The window.</param>
            <param name="value">if set to <c>true</c> the glass frame is disabled.</param>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.DisableGlassFrameProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.DisableGlassFrame" /> attached property
            </summary>
            <AttachedPropertyComments>
            <summary>
            Control DWM composition via the hosting Window.
            </summary>
            </AttachedPropertyComments>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.NcHitTestEvent">
            <summary>
            The WM_NCHITTEST test event equivalent.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.OnAttached">
            <summary>
            Called when the element is attached.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.OnDetaching">
            <summary>
            Called when the element is detached.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.RedrawWindowFlags.Invalidate">
            <summary>
            Invalidates the rectangle or region that you specify in lprcUpdate or hrgnUpdate.
            You can set only one of these parameters to a non-NULL value. If both are NULL, RDW_INVALIDATE invalidates the entire window.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.RedrawWindowFlags.InternalPaint">
            <summary>Causes the OS to post a WM_PAINT message to the window regardless of whether a portion of the window is invalid.</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.RedrawWindowFlags.Erase">
            <summary>
            Causes the window to receive a WM_ERASEBKGND message when the window is repainted.
            Specify this value in combination with the RDW_INVALIDATE value; otherwise, RDW_ERASE has no effect.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.RedrawWindowFlags.Validate">
            <summary>
            Validates the rectangle or region that you specify in lprcUpdate or hrgnUpdate.
            You can set only one of these parameters to a non-NULL value. If both are NULL, RDW_VALIDATE validates the entire window.
            This value does not affect internal WM_PAINT messages.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.RedrawWindowFlags.NoErase">
            <summary>Suppresses any pending WM_ERASEBKGND messages.</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.RedrawWindowFlags.NoChildren">
            <summary>Excludes child windows, if any, from the repainting operation.</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.RedrawWindowFlags.AllChildren">
            <summary>Includes child windows, if any, in the repainting operation.</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.RedrawWindowFlags.UpdateNow">
            <summary>Causes the affected windows, which you specify by setting the RDW_ALLCHILDREN and RDW_NOCHILDREN values, to receive WM_ERASEBKGND and WM_PAINT messages before the RedrawWindow returns, if necessary.</summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.CustomNonClientAreaBehavior.RedrawWindowFlags.EraseNow">
            <summary>
            Causes the affected windows, which you specify by setting the RDW_ALLCHILDREN and RDW_NOCHILDREN values, to receive WM_ERASEBKGND messages before RedrawWindow returns, if necessary.
            The affected windows receive WM_PAINT messages at the ordinary time.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.Interactivity.FrameworkElementBehavior`1">
            <summary>
            A <see cref="T:Microsoft.Xaml.Behaviors.Behavior`1" /> with build in support for the <see cref="E:System.Windows.FrameworkElement.Loaded" /> and <see cref="E:System.Windows.FrameworkElement.Unloaded" /> events.
            </summary>
            <typeparam name="T">The type the <see cref="T:TomsToolbox.Wpf.Interactivity.FrameworkElementBehavior`1" /> can be attached to.</typeparam>
        </member>
        <member name="P:TomsToolbox.Wpf.Interactivity.FrameworkElementBehavior`1.IsLoaded">
            <summary>
            Gets a value indicating whether the associated object is loaded.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.FrameworkElementBehavior`1.OnAssociatedObjectLoaded">
            <summary>
            Called when the associated object is loaded.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.FrameworkElementBehavior`1.OnAssociatedObjectUnloaded">
            <summary>
            Called when the associated object is unloaded.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.FrameworkElementBehavior`1.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
            <remarks>
            Override this to hook up functionality to the AssociatedObject.
            </remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.FrameworkElementBehavior`1.OnDetaching">
            <summary>
            Called when the behavior is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
            <remarks>
            Override this to unhook functionality from the AssociatedObject.
            </remarks>
        </member>
        <member name="T:TomsToolbox.Wpf.Interactivity.ListBoxSelectAllBehavior">
            <summary>
            A behavior for a list box to handle the interaction betwen the list box and a "select all" checkbox.
            </summary>
            <seealso cref="T:Microsoft.Xaml.Behaviors.Behavior`1" />
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.ListBoxSelectAllBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Interactivity.ListBoxSelectAllBehavior" /> class.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Interactivity.ListBoxSelectAllBehavior.AreAllFilesSelected">
            <summary>
            Gets or sets a flag indicating if all files are selected. Bind this property to the <see cref="P:System.Windows.Controls.Primitives.ToggleButton.IsChecked" /> property of a three state check box.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.ListBoxSelectAllBehavior.AreAllFilesSelectedProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Interactivity.ListBoxSelectAllBehavior.AreAllFilesSelected" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.ListBoxSelectAllBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
            <remarks>
            Override this to hook up functionality to the AssociatedObject.
            </remarks>
        </member>
        <member name="T:TomsToolbox.Wpf.Interactivity.MapPanBehavior">
            <summary>
            Implements pan behavior for the <see cref="T:TomsToolbox.Wpf.Controls.Map" /> control.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.MapPanBehavior.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the Freezable derived class. 
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.MapPanBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
            <remarks>
            Override this to hook up functionality to the AssociatedObject.
            </remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.MapPanBehavior.OnAssociatedObjectLoaded">
            <inheritdoc />
        </member>
        <member name="T:TomsToolbox.Wpf.Interactivity.MapTouchBehavior">
            <summary>
            Behavior to add support for touch manipulation to the <see cref="T:TomsToolbox.Wpf.Controls.Map" /> object.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.MapTouchBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
            <remarks>
            Override this to hook up functionality to the AssociatedObject.
            </remarks>
        </member>
        <member name="T:TomsToolbox.Wpf.Interactivity.MapZoomBehavior">
            <summary>
            Implements zooming behavior for the <see cref="T:TomsToolbox.Wpf.Controls.Map" /> control.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Interactivity.MapZoomBehavior.MouseWheelIncrement">
            <summary>
            Gets or sets the number of zoom steps performed on one mouse wheel event.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.MapZoomBehavior.MouseWheelIncrementProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Interactivity.MapZoomBehavior.MouseWheelIncrement" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.MapZoomBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
            <remarks>
            Override this to hook up functionality to the AssociatedObject.
            </remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.MapZoomBehavior.OnAssociatedObjectLoaded">
            <inheritdoc />
        </member>
        <member name="T:TomsToolbox.Wpf.Interactivity.PasswordBoxBindingBehavior">
            <summary>
            A behavior to enable access to the <see cref="P:System.Windows.Controls.PasswordBox.Password" /> property.
            </summary>
            <remarks>
            Not that accessing the password of the password box via binding has some security issues.
            </remarks>
        </member>
        <member name="P:TomsToolbox.Wpf.Interactivity.PasswordBoxBindingBehavior.Text">
            <summary>
            Gets or sets the password as plain text.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.PasswordBoxBindingBehavior.TextProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Interactivity.PasswordBoxBindingBehavior.Text" /> dependency property
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.PasswordBoxBindingBehavior.OnAttached">
            <inheritdoc />
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.PasswordBoxBindingBehavior.OnDetaching">
            <inheritdoc />
        </member>
        <member name="T:TomsToolbox.Wpf.Interactivity.PopupFocusManagerBehavior">
            <summary>
            Handle focus for popups opened by toggle buttons. 
            When the popup opens, the focus is set to the first focusable control in the popup.
            When the popup closes, the focus is set back to the button.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Interactivity.PopupFocusManagerBehavior.ToggleButton">
            <summary>
            Gets or sets the toggle button that controls the popup.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.PopupFocusManagerBehavior.ToggleButtonProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Interactivity.PopupFocusManagerBehavior.ToggleButton" /> dependency property.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.PopupFocusManagerBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
            <remarks>
            Override this to hook up functionality to the AssociatedObject.
            </remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.PopupFocusManagerBehavior.OnDetaching">
            <summary>
            Called when the behavior is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
            <remarks>
            Override this to unhook functionality from the AssociatedObject.
            </remarks>
        </member>
        <member name="T:TomsToolbox.Wpf.Interactivity.SelectGroupOnGroupHeaderClickBehavior">
             <summary>
             If attached to the root visual in the group header template of a selector control, 
             all items in the group will be selected when the group header is clicked, 
             or added to the current selection when the Ctlr-key is down. 
            
             </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.SelectGroupOnGroupHeaderClickBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
            <remarks>
            Override this to hook up functionality to the AssociatedObject.
            </remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.SelectGroupOnGroupHeaderClickBehavior.OnDetaching">
            <summary>
            Called when the behavior is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
            <remarks>
            Override this to unhook functionality from the AssociatedObject.
            </remarks>
        </member>
        <member name="T:TomsToolbox.Wpf.Interactivity.SelectionRectangleBehavior">
            <summary>
            Adding selection rectangle behavior to a layer canvas. Selection is done with the right mouse button.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Interactivity.SelectionRectangleBehavior.TargetElement">
            <summary>
            Gets or sets the target element that displays the selection.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.SelectionRectangleBehavior.TargetElementProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Interactivity.SelectionRectangleBehavior.TargetElement" /> dependency property.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Interactivity.SelectionRectangleBehavior.Viewport">
            <summary>
            Gets or sets the view port in which the target element is displayed.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.SelectionRectangleBehavior.ViewportProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Interactivity.SelectionRectangleBehavior.Viewport" /> dependency property.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Interactivity.SelectionRectangleBehavior.Selection">
            <summary>
            Gets or sets the selection rectangle in logical coordinates.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.SelectionRectangleBehavior.SelectionProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Interactivity.SelectionRectangleBehavior.Selection" /> dependency property.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="T:TomsToolbox.Wpf.Interactivity.TimerTrigger">
            <summary>
            A trigger that continuously fires while the associated object is loaded.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.Interactivity.TimerTrigger.Interval">
            <summary>
            Gets or sets the interval of the timer.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.TimerTrigger.IntervalProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Interactivity.TimerTrigger.Interval" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.TimerTrigger.OnAttached">
            <inheritdoc />
        </member>
        <member name="T:TomsToolbox.Wpf.Interactivity.UpdatePropertyAction">
            <summary>
            Updates the associated objects binding of the specified property; e.g. display computed properties like current time without the need to
            write a special services that provide individual property change events.
            </summary>
            <example><code language="XAML"><![CDATA[
            <TextBlock x:Name="Text" Text="{Binding SomeComputedPropertyWithoutChangeNotification}" />
            <i:Interaction.Triggers>
              <ei:TimerTrigger MillisecondsPerTick="1000">
                <toms:UpdatePropertyAction TargetName="Text" Property="{x:Static TextBlock.TextProperty}"/>
              </ei:TimerTrigger>
            </i:Interaction.Triggers>
            ]]>
            </code></example>
        </member>
        <member name="P:TomsToolbox.Wpf.Interactivity.UpdatePropertyAction.Property">
            <summary>
            Gets the property that should be refreshed.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.Interactivity.UpdatePropertyAction.PropertyProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.Interactivity.UpdatePropertyAction.Property" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.UpdatePropertyAction.Invoke(System.Object)">
            <summary>
            Invokes the action.
            </summary>
            <param name="parameter">
            The parameter to the action. If the action does not require a parameter, the parameter may be
            set to a null reference.
            <p /><c>[CanBeNull]</c></param>
        </member>
        <member name="T:TomsToolbox.Wpf.Interactivity.WindowButtonsHandlingBehavior">
            <summary>
            Attaches default handling for the <see cref="T:TomsToolbox.Wpf.WindowCommands" />
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.WindowButtonsHandlingBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
            <remarks>
            Override this to hook up functionality to the AssociatedObject.
            </remarks>
        </member>
        <member name="T:TomsToolbox.Wpf.Interactivity.ZoomFontSizeOnMouseWheelBehavior">
            <summary>
            When attached to a framework element, the <see cref="P:System.Windows.Documents.TextElement.FontSize" /> property 
            will be changed upon Ctrl+MouseWheel events.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.ZoomFontSizeOnMouseWheelBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
            <remarks>
            Override this to hook up functionality to the AssociatedObject.
            </remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.Interactivity.ZoomFontSizeOnMouseWheelBehavior.OnDetaching">
            <summary>
            Called when the behavior is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
            <remarks>
            Override this to unhook functionality from the AssociatedObject.
            </remarks>
        </member>
        <member name="T:TomsToolbox.Wpf.ItemsControlExtensions">
            <summary>
            Extensions and helpers for the <see cref="T:System.Windows.Controls.ItemsControl" /> or derived classes.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.ItemsControlExtensions.GetDefaultItemCommand(System.Windows.Controls.ItemsControl)">
            <summary>
            Gets the default item command. See <see cref="P:TomsToolbox.Wpf.ItemsControlExtensions.DefaultItemCommand" /> attached property for details.
            <p /><c>[CanBeNull]</c></summary>
            <param name="obj">The object.<p /><c>[NotNull]</c></param>
            <returns>The command.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.ItemsControlExtensions.SetDefaultItemCommand(System.Windows.Controls.ItemsControl,System.Windows.Input.ICommand)">
            <summary>
            Sets the default item command. See <see cref="P:TomsToolbox.Wpf.ItemsControlExtensions.DefaultItemCommand" /> attached property for details.
            </summary>
            <param name="obj">The object.<p /><c>[NotNull]</c></param>
            <param name="value">The command.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="F:TomsToolbox.Wpf.ItemsControlExtensions.DefaultItemCommandProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.ItemsControlExtensions.DefaultItemCommand" /> attached property
            <p /><c>[NotNull]</c></summary>
            <AttachedPropertyComments>
            <summary>
            The default item command is the command that will be executed when an item of the items control has received a mouse double click or enter key.
            It is not executed when the double-click is on the background or on the scrollbar.
            This command avoids the ubiquitous wrong implementations as well as code duplication when handling double-clicks in items controls like the <see cref="T:System.Windows.Controls.ListBox" />
            <para />
            The command parameter for the command is the item that has been clicked.
            </summary>
            </AttachedPropertyComments>
        </member>
        <member name="M:TomsToolbox.Wpf.ItemsControlExtensions.GetRefreshOnSourceChanges(System.Windows.Controls.ItemsControl)">
            <summary>
            Gets the object that will be observed for changes.
            A change of the object will trigger a refresh on the collection view of the attached items control.
            <p /><c>[CanBeNull]</c></summary>
            <param name="obj">The <see cref="T:System.Windows.Controls.ItemsControl" /> to refresh.<p /><c>[NotNull]</c></param>
            <returns>The object to observe.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.ItemsControlExtensions.SetRefreshOnSourceChanges(System.Windows.Controls.ItemsControl,System.Object)">
            <summary>
            Sets the object that will be observed for changes.
            A change of the object will trigger a refresh on the collection view of the attached items control.
            </summary>
            <param name="obj">The <see cref="T:System.Windows.Controls.ItemsControl" /> to refresh.<p /><c>[NotNull]</c></param>
            <param name="value">The object to observe.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="F:TomsToolbox.Wpf.ItemsControlExtensions.RefreshOnSourceChangesProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.ItemsControlExtensions.RefreshOnSourceChanges" /> attached property
            <p /><c>[NotNull]</c></summary>
            <AttachedPropertyComments>
            <summary>
            The object that will be observed for changes. A change of the object will trigger a refresh on the collection view of the attached items control.
            </summary>
            </AttachedPropertyComments>
        </member>
        <member name="M:TomsToolbox.Wpf.ItemsControlExtensions.GetItemContainers``1(System.Windows.Controls.ItemsControl)">
            <summary>
            Gets the item containers for a items control.
            <p /><c>[NotNull, ItemCanBeNull]</c></summary>
            <typeparam name="T">The type of the containers.</typeparam>
            <param name="itemsControl">The items control.<p /><c>[NotNull]</c></param>
            <returns>The list of containers; contains <c>null</c> entries for unrealized containers (see <see cref="M:System.Windows.Controls.ItemContainerGenerator.ContainerFromIndex(System.Int32)" />).</returns>
        </member>
        <member name="T:TomsToolbox.Wpf.ListCollectionViewListAdapter`1">
            <summary>
            Adapter for a <see cref="T:System.Windows.Data.ListCollectionView" /> that exposes the content as a read-only collection with an IList interface.
            </summary>
            <typeparam name="T">The type of elements in the collection.</typeparam>
        </member>
        <member name="M:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.#ctor(System.Windows.Data.ListCollectionView)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.ListCollectionViewListAdapter`1" /> class.
            </summary>
            <param name="collectionView">The collection view.<p /><c>[NotNull, ItemCanBeNull]</c></param>
        </member>
        <member name="P:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.CollectionView">
            <summary>
            Gets the underlying collection view.
            <p /><c>[NotNull, ItemCanBeNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
            <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.<p /><c>[CanBeNull]</c></param>
            <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="P:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.
            </summary>
        </member>
        <member name="E:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="E:TomsToolbox.Wpf.ListCollectionViewListAdapter`1.CollectionChanged">
            <summary>
            Occurs when the collection changes.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.MultiSelectorExtensions">
            <summary>
            Extensions for multi selectors like ListBox or DataGrid:
            <list type="bullet">
            <item>Support binding operations with SelectedItems property.</item>
            </list>
            </summary>
            <remarks>
            SelectionBinding:
            <para />
            Since there is no common interface for ListBox and DataGrid, the SelectionBinding is implemented via reflection/dynamics, so it will
            work on any FrameworkElement that has the SelectedItems, SelectedItem and SelectedItemIndex properties and the SelectionChanged event.
            </remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.MultiSelectorExtensions.GetSelectionBinding(System.Windows.Controls.Primitives.Selector)">
            <summary>
            Gets the value of the <see cref="P:TomsToolbox.Wpf.MultiSelectorExtensions.SelectionBinding" /> attached property.
            <p /><c>[CanBeNull, ItemCanBeNull]</c></summary>
            <param name="obj">The object to attach to.<p /><c>[NotNull]</c></param>
            <returns>The current selection.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.MultiSelectorExtensions.SetSelectionBinding(System.Windows.Controls.Primitives.Selector,System.Collections.IList)">
            <summary>
            Sets the value of the <see cref="P:TomsToolbox.Wpf.MultiSelectorExtensions.SelectionBinding" /> attached property.
            </summary>
            <param name="obj">The object to attach to.<p /><c>[NotNull]</c></param>
            <param name="value">The new selection.<p /><c>[CanBeNull, ItemCanBeNull]</c></param>
        </member>
        <member name="F:TomsToolbox.Wpf.MultiSelectorExtensions.SelectionBindingProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.MultiSelectorExtensions.SelectionBinding" /> dependency property.
            <p /><c>[NotNull]</c></summary>
            <AttachedPropertyComments>
            <summary>
            Attach this property to a ListBox or DataGrid to bind the selectors SelectedItems property to the view models SelectedItems property.
            </summary>
            <example>
            If your view model has two properties "AnyList Items { get; }" and "IList SelectedItems { get; set; }" your XAML looks like this:
            <para />
            <code><![CDATA[
            <ListBox ItemsSource="{Binding Path=Items}" core:MultiSelectorExtensions.SelectionBinding="{Binding Path=SelectedItems}"/>
            ]]></code>
            </example>
            </AttachedPropertyComments>
        </member>
        <member name="T:TomsToolbox.Wpf.NullCommand">
            <summary>
            A <see cref="T:System.Windows.Input.ICommand" /> implementation that does nothing and can't be executed. 
            </summary>
            <remarks>
            Useful as fallback for command bindings, since a binding to <c>null</c> will leave the bound control enabled.
            </remarks>
        </member>
        <member name="F:TomsToolbox.Wpf.NullCommand.Default">
            <summary>
            The singleton instance of the command.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.NullCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.NullCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="E:TomsToolbox.Wpf.NullCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.ObservableObjectBase">
            <summary>
            Base class implementing <see cref="T:System.ComponentModel.INotifyPropertyChanged" />.<para />
            Supports declarative dependencies specified by the <see cref="T:TomsToolbox.Wpf.PropertyDependencyAttribute" /> and
            relaying events of other objects using the <see cref="T:TomsToolbox.Wpf.RelayedEventAttribute" />.
            </summary>
            <remarks>
            Also implements <see cref="T:System.ComponentModel.IDataErrorInfo" /> and <see cref="T:System.ComponentModel.INotifyDataErrorInfo" /> to support validation.
            The default implementation examines <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> on the affected properties to retrieve error information.
            </remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.ObservableObjectBase.RelayEventsOf(System.ComponentModel.INotifyPropertyChanged,System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Relays the property changed events of the source object (if not null) and detaches the old source (if not null).
            </summary>
            <param name="oldSource"><p /><c>[CanBeNull]</c></param>
            <param name="newSource"><p /><c>[CanBeNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.ObservableObjectBase.RelayEventsOf(System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Relays the property changed events of the source object.
            The properties to relay must be declared with the <see cref="T:TomsToolbox.Wpf.RelayedEventAttribute" />.
            </summary>
            <param name="source">The source.<p /><c>[NotNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.ObservableObjectBase.DetachEventSources">
            <summary>
            Detaches all event sources.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.ObservableObjectBase.DetachEventSource(System.ComponentModel.INotifyPropertyChanged)">
            <summary>
            Detaches the event source.
            </summary>
            <param name="item">The item to detach.<p /><c>[NotNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.ObservableObjectBase.OnPropertyChanged``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Raises the <see cref="E:TomsToolbox.Wpf.ObservableObjectBase.PropertyChanged" /> event for the property identified by the specified property expression.
            <p /><c>[NotifyPropertyChangedInvocator]</c></summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="propertyExpression">The expression identifying the property.<p /><c>[NotNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.ObservableObjectBase.SetProperty``1(``0@,``0,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Sets the property and raises the <see cref="E:TomsToolbox.Wpf.ObservableObjectBase.PropertyChanged" /> event for the property identified by the specified property expression.
            <p /><c>[NotifyPropertyChangedInvocator]</c></summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="backingField">The backing field for the property.<p /><c>[CanBeNull]</c></param>
            <param name="value">The value.<p /><c>[CanBeNull]</c></param>
            <param name="propertyExpression">The expression identifying the property.<p /><c>[NotNull]</c></param>
            <returns>True if value has changed and the PropertyChange event was raised.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.ObservableObjectBase.SetProperty``1(``0@,``0,System.Linq.Expressions.Expression{System.Func{``0}},System.Action{``0,``0})">
            <summary>
            Sets the property and raises the <see cref="E:TomsToolbox.Wpf.ObservableObjectBase.PropertyChanged" /> event for the property identified by the specified property expression.
            <p /><c>[NotifyPropertyChangedInvocator]</c></summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="backingField">The backing field for the property.<p /><c>[CanBeNull]</c></param>
            <param name="value">The value.<p /><c>[CanBeNull]</c></param>
            <param name="propertyExpression">The expression identifying the property.<p /><c>[NotNull]</c></param>
            <param name="changeCallback">The callback that is invoked if the value has changed. Parameters are (oldValue, newValue).<p /><c>[NotNull]</c></param>
            <returns>True if value has changed and the PropertyChange event was raised.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.ObservableObjectBase.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Sets the property and raises the <see cref="E:TomsToolbox.Wpf.ObservableObjectBase.PropertyChanged" /> event for the property identified by the specified property expression.
            <p /><c>[NotifyPropertyChangedInvocator]</c></summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="backingField">The backing field for the property.<p /><c>[CanBeNull]</c></param>
            <param name="value">The value.<p /><c>[CanBeNull]</c></param>
            <param name="propertyName">Name of the property; omit this parameter to use the callers name provided by the CallerMemberNameAttribute<p /><c>[NotNull]</c></param>
            <returns>True if value has changed and the PropertyChange event was raised. </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.ObservableObjectBase.SetProperty``1(``0@,``0,System.String,System.Action{``0,``0})">
            <summary>
            Sets the property and raises the <see cref="E:TomsToolbox.Wpf.ObservableObjectBase.PropertyChanged" /> event for the property identified by the specified property expression.
            <p /><c>[NotifyPropertyChangedInvocator]</c></summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="backingField">The backing field for the property.<p /><c>[CanBeNull]</c></param>
            <param name="value">The value.<p /><c>[CanBeNull]</c></param>
            <param name="propertyName">Name of the property.<p /><c>[NotNull]</c></param>
            <param name="changeCallback">The callback that is invoked if the value has changed. Parameters are (oldValue, newValue).<p /><c>[NotNull]</c></param>
            <returns> True if value has changed and the PropertyChange event was raised. </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.ObservableObjectBase.SetProperty``1(``0@,``0,System.Action{``0,``0},System.String)">
            <summary>
            Sets the property and raises the <see cref="E:TomsToolbox.Wpf.ObservableObjectBase.PropertyChanged" /> event for the property identified by the specified property expression.
            <p /><c>[NotifyPropertyChangedInvocator]</c></summary>
            <typeparam name="T">The type of the property.</typeparam>
            <param name="backingField">The backing field for the property.<p /><c>[CanBeNull]</c></param>
            <param name="value">The value.<p /><c>[CanBeNull]</c></param>
            <param name="changeCallback">The callback that is invoked if the value has changed. Parameters are (oldValue, newValue).<p /><c>[NotNull]</c></param>
            <param name="propertyName">Name of the property; omit this parameter to use the callers name provided by the CallerMemberNameAttribute<p /><c>[NotNull]</c></param>
            <returns> True if value has changed and the PropertyChange event was raised. </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.ObservableObjectBase.OnPropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:TomsToolbox.Wpf.ObservableObjectBase.PropertyChanged" /> event for the property with the specified name.
            <p /><c>[NotifyPropertyChangedInvocator]</c></summary>
            <param name="propertyName">Name of the property; omit this parameter to use the callers name provided by the CallerMemberNameAttribute<p /><c>[NotNull]</c></param>
        </member>
        <member name="E:TomsToolbox.Wpf.ObservableObjectBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.ObservableObjectBase.GetDataErrors(System.String)">
            <summary>
            Gets the validation errors for a specified property or for the entire entity.
            <p /><c>[NotNull, ItemNotNull]</c></summary>
            <param name="propertyName">The name of the property to retrieve validation errors for; or null or <see cref="F:System.String.Empty" />, to retrieve entity-level errors.<p /><c>[CanBeNull]</c></param>
            <returns>
            The validation errors for the property or entity.
            </returns>
            <remarks>
            The default implementation returns the <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" /> errors of the property.
            </remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.ObservableObjectBase.OnDataErrorsEvaluated(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Called when data errors have been evaluated. Used e.g. to track data errors for each property.
            </summary>
            <param name="propertyName">Name of the property, or <c>null</c> if the errors .<p /><c>[CanBeNull]</c></param>
            <param name="dataErrors">The data errors for the property.<p /><c>[CanBeNull, ItemNotNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.ObservableObjectBase.Finalize">
            <inheritdoc />
        </member>
        <member name="M:TomsToolbox.Wpf.ObservableObjectBase.OnErrorsChanged(System.String)">
            <summary>
            Raises the <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> event.
            </summary>
            <param name="propertyName">The name of the property where validation errors have changed; or null or <see cref="F:System.String.Empty" />, when entity-level errors have changed.</param>
        </member>
        <member name="T:TomsToolbox.Wpf.ObservableObject">
            <summary>
            Like <see cref="T:TomsToolbox.Wpf.ObservableObjectBase" />, with an additional dispatcher field to track the owning thread.
            This version is not serializable, since <see cref="P:TomsToolbox.Wpf.ObservableObject.Dispatcher" /> is not.
            </summary>
            <seealso cref="T:TomsToolbox.Wpf.ObservableObjectBase" />
        </member>
        <member name="P:TomsToolbox.Wpf.ObservableObject.Dispatcher">
            <summary>
            Gets the dispatcher of the thread where this object was created.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="T:TomsToolbox.Wpf.PresentationFrameworkExtensions">
            <summary>
            Common extension methods for presentation framework objects.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.ProcessMessages(System.Windows.Media.Visual)">
            <summary>
            Waits until all pending messages up to the <see cref="F:System.Windows.Threading.DispatcherPriority.Background" /> priority are processed.
            </summary>
            <param name="visual">The dispatcher object to wait on.<p /><c>[NotNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.ProcessMessages(System.Windows.Media.Visual,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Waits until all pending messages up to the specified priority are processed.
            </summary>
            <param name="visual">The dispatcher object to wait on.<p /><c>[NotNull]</c></param>
            <param name="priority">The priority up to which all messages should be processed.</param>
        </member>
        <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.ProcessMessages(System.Windows.Threading.Dispatcher)">
            <summary>
            Waits until all pending messages up to the <see cref="F:System.Windows.Threading.DispatcherPriority.Background" /> priority are processed.
            </summary>
            <param name="dispatcher">The dispatcher to wait on.<p /><c>[NotNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.ProcessMessages(System.Windows.Threading.Dispatcher,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Waits until all pending messages up to the specified priority are processed.
            </summary>
            <param name="dispatcher">The dispatcher to wait on.<p /><c>[NotNull]</c></param>
            <param name="priority">The priority up to which all messages should be processed.</param>
        </member>
        <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.GetCenter(System.Windows.Rect)">
            <summary>
            Gets the center point of the specified rectangle.
            </summary>
            <param name="rect">The rectangle.</param>
            <returns>The center point.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.Translate(System.Windows.Rect,System.Windows.Media.Visual,System.Windows.Media.Visual)">
            <summary>
            Translates the coordinates of the specified rectangle from the first visual to the second visual.
            </summary>
            <param name="rect">The rectangle.</param>
            <param name="from">The visual for which the rectangle coordinates are specified.<p /><c>[NotNull]</c></param>
            <param name="to">The visual to which the rectangle coordinates are translated.<p /><c>[NotNull]</c></param>
            <returns>The translated rectangle</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.Translate(System.Windows.Point,System.Windows.UIElement,System.Windows.UIElement)">
            <summary>
            Translates the coordinates of the specified point from the first visual to the second visual.
            </summary>
            <param name="point">The point.</param>
            <param name="from">The visual for which the point coordinates are specified.<p /><c>[NotNull]</c></param>
            <param name="to">The visual to which the point coordinates are translated.<p /><c>[NotNull]</c></param>
            <returns>The translated point</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.GetClientRect(System.Windows.FrameworkElement)">
            <summary>
            Gets the client rectangle of the framework element.
            </summary>
            <param name="self">The framework element for which to retrieve the client rectangle.<p /><c>[NotNull]</c></param>
            <returns>The client rectangle</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.GetClientRect(System.Windows.FrameworkElement,System.Windows.Media.Visual)">
            <summary>
            Gets the client rectangle of the framework element translated to another visual.
            </summary>
            <param name="self">The framework element for which to retrieve the client rectangle.<p /><c>[NotNull]</c></param>
            <param name="relativeTo">The visual to which the rectangle coordinates are translated.<p /><c>[NotNull]</c></param>
            <returns>
            The client rectangle relative to the visual.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.GetExtent(System.Windows.FrameworkElement)">
            <summary>
            Gets the extent of the framework element.
            </summary>
            <param name="self">The framework element for which to retrieve the extent.<p /><c>[NotNull]</c></param>
            <returns>The extent.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.GetExtent(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            Gets the extent of the framework element translated to another visual.
            </summary>
            <param name="self">The framework element for which to retrieve the extent.<p /><c>[NotNull]</c></param>
            <param name="relativeTo">The visual to which the extent is translated.<p /><c>[NotNull]</c></param>
            <returns>
            The extent relative to the visual.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.GetPhysicalPixelSize(System.Windows.FrameworkElement)">
            <summary>
            Gets the physical size of one pixel in design units.
            </summary>
            <param name="self">The framework element used to get the presentation source.<p /><c>[NotNull]</c></param>
            <returns>The physical size of one pixel in design units.</returns>
            <exception cref="T:System.ArgumentException">The framework element is not loaded in the visual tree.</exception>
        </member>
        <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.GetDesignUnitSize(System.Windows.FrameworkElement)">
            <summary>
            Gets the physical size of one design unit in pixels.
            </summary>
            <param name="self">The framework element used to get the presentation source.<p /><c>[NotNull]</c></param>
            <returns>The physical size of one design unit in pixels.</returns>
            <exception cref="T:System.ArgumentException">The framework element is not loaded in the visual tree.</exception>
        </member>
        <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.MergeWith(System.Windows.Media.GeneralTransform,System.Windows.Media.GeneralTransform[])">
            <summary>
            Merges the first transformation with the second.
            <p /><c>[NotNull]</c></summary>
            <param name="first">The base transformation.<p /><c>[NotNull]</c></param>
            <param name="others">The transformations to merge.<p /><c>[NotNull, ItemNotNull]</c></param>
            <returns>The merged transformation.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.PresentationFrameworkExtensions.ChangeTracker``1(``0,System.Windows.DependencyProperty)">
            <summary>
            Tracks the changes of the specified property. 
            Unlike the <see cref="M:TomsToolbox.Wpf.DependencyObjectExtensions.Track``1(``0,System.Windows.DependencyProperty)" />, it tracks events only while the <paramref name="frameworkElement" /> is loaded, 
            to avoid memory leaks because the event handlers are referenced by the global <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />.
            <p /><c>[NotNull]</c></summary>
            <typeparam name="T">The type of the framework element to track.</typeparam>
            <param name="frameworkElement">The framework element.<p /><c>[NotNull]</c></param>
            <param name="property">The property to track.<p /><c>[NotNull]</c></param>
            <returns>The object providing the changed event.</returns>
        </member>
        <member name="T:TomsToolbox.Wpf.PropertyBinding`1">
            <summary>
            Support binding to a property of an element when the target is not a <see cref="T:System.Windows.DependencyObject" />
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
        </member>
        <member name="M:TomsToolbox.Wpf.PropertyBinding`1.#ctor(System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.PropertyBinding`1" /> class.
            </summary>
            <param name="source">The source.<p /><c>[CanBeNull]</c></param>
            <param name="path">The path.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.PropertyBinding`1.#ctor(System.Object,System.Windows.PropertyPath)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.PropertyBinding`1" /> class.
            </summary>
            <param name="source">The source.<p /><c>[CanBeNull]</c></param>
            <param name="propertyPath">The property path.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.PropertyBinding`1.#ctor(System.Object,System.Windows.Data.BindingMode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.PropertyBinding`1" /> class.
            </summary>
            <param name="source">The source.<p /><c>[CanBeNull]</c></param>
            <param name="mode">The mode.</param>
            <param name="path">The path.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.PropertyBinding`1.#ctor(System.Object,System.Windows.Data.BindingMode,System.Windows.PropertyPath)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.PropertyBinding`1" /> class.
            </summary>
            <param name="source">The source.<p /><c>[CanBeNull]</c></param>
            <param name="mode">The mode.</param>
            <param name="propertyPath">The property path.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="P:TomsToolbox.Wpf.PropertyBinding`1.Value">
            <summary>
            Gets or sets the value.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="E:TomsToolbox.Wpf.PropertyBinding`1.ValueChanged">
            <summary>
            Occurs when the value has changed.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.PropertyBinding`1.Detach">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.PropertyBindingValueChangedEventArgs`1">
            <summary>
            Event arguments for the <see cref="E:TomsToolbox.Wpf.PropertyBinding`1.ValueChanged" /> event.
            </summary>
            <typeparam name="T">The type of the variable.</typeparam>
        </member>
        <member name="M:TomsToolbox.Wpf.PropertyBindingValueChangedEventArgs`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.PropertyBindingValueChangedEventArgs`1" /> class.
            </summary>
            <param name="oldValue">The old value.<p /><c>[CanBeNull]</c></param>
            <param name="newValue">The new value.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="P:TomsToolbox.Wpf.PropertyBindingValueChangedEventArgs`1.OldValue">
            <summary>
            Gets the old value.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.PropertyBindingValueChangedEventArgs`1.NewValue">
            <summary>
            Gets the new value.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="T:TomsToolbox.Wpf.PropertyDependencyAttribute">
             <summary>
             Attribute to mark one property as dependent on another property.
             If you call <see cref="M:TomsToolbox.Wpf.ObservableObjectBase.OnPropertyChanged(System.String)" /> for one property, the property change event will also be raised for all dependent properties.
             </summary>
             <example><code language="C#"><![CDATA[
             class X : ObservableObject
             {
                 string Value { get { ... } }
            
                 [PropertyDependency("Value")]
                 int ValueLength { get { ... } }
            
                 void ChageSomething()
                 {
                     OnPropertyChanged("Value");
                 }
             }
             ]]></code>
             Calling 'OnPropertyChanged("Value")' will raise the PropertyChanged event for the "Value" property as well as for the dependent "ValueLength" property.
             </example>
        </member>
        <member name="M:TomsToolbox.Wpf.PropertyDependencyAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.PropertyDependencyAttribute" /> class.
            </summary>
            <param name="propertyNames">The property names of the properties that this property depends on.<p /><c>[NotNull, ItemNotNull]</c></param>
        </member>
        <member name="P:TomsToolbox.Wpf.PropertyDependencyAttribute.PropertyNames">
            <summary>
            Gets the names of the properties that the attributed property depends on.
            <p /><c>[NotNull, ItemNotNull]</c></summary>
        </member>
        <member name="M:TomsToolbox.Wpf.PropertyDependencyAttribute.CreateDependencyMapping(System.Type)">
            <summary>
            Creates the dependency mapping from the attributes of the properties of the specified type.
            <p /><c>[CanBeNull]</c></summary>
            <param name="type">The type.<p /><c>[CanBeNull]</c></param>
            <returns>A dictionary that maps the property names to all direct and indirect dependent property names.</returns>
            <exception cref="T:System.InvalidOperationException">Invalid dependency definitions, i.e. dependency to non-existing property.</exception>
        </member>
        <member name="M:TomsToolbox.Wpf.PropertyDependencyAttribute.GetInvalidDependencies(System.Type)">
            <summary>
            Gets a list of invalid dependency definitions in the entry types assembly and all referenced assemblies.
            <p /><c>[NotNull, ItemNotNull]</c></summary>
            <param name="entryType">Type of the entry.<p /><c>[NotNull]</c></param>
            <returns>A list of strings, each describing an invalid dependency definition. If no invalid definitions exist, the list is empty.</returns>
            <remarks>This method is mainly for writing unit test to detect invalid dependencies during compile time.</remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.PropertyDependencyAttribute.GetCustomAssemblies(System.Type)">
            <summary>
            Gets the custom assemblies (i.e. assemblies in the same folder or sub-folder) referenced by the assembly of the specified type.
            </summary>
            <param name="entryType">A type contained in the entry assembly.</param>
            <returns>The assembly that contains the entryType plus all custom assemblies that this assembly references.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.PropertyDependencyAttribute.IsAssemblyInSubfolderOf(System.Reflection.AssemblyName,System.String)">
            <summary>
            Determines whether the assembly is located in the same folder or a sub folder of the specified program folder.
            </summary>
            <param name="assemblyName">Name of the assembly.</param>
            <param name="programFolder">The program folder.</param>
            <returns>
              <c>true</c> if the assembly is located in the same folder or a sub folder of the specified program folder; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:TomsToolbox.Wpf.RelayedEventAttribute">
             <summary>
             Attribute to mark one property to relay the property changed events of another property from the governing class.
             If you call <see cref="M:TomsToolbox.Wpf.ObservableObjectBase.OnPropertyChanged(System.String)" /> for a property of the governing class,
             the property change event will also be raised for the relayed property.
             </summary>
             <example>
             <code language="C#"><![CDATA[
             class X : ObservableObject
             {
                 Y _governingObject;
            
                 public X(Y governingObject)
                 {
                     _governingObject = governingObject;
                     RelayEventsOf(_governingObject);
                 }
            
                 [RelayedEvent(typeof(Y))]
                 string Value { get { return _governingObject.Value } }
            
                 void ChageSomething()
                 {
                     _governingObject.Value = "new Value";
                 }
             }
             ]]></code>
             Changing 'Y.Value' will also raise the PropertyChanged event for the "X.Value" property.
             </example>
        </member>
        <member name="M:TomsToolbox.Wpf.RelayedEventAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.RelayedEventAttribute" /> class.
            </summary>
            <param name="sourceType">Type of the source for the events.<p /><c>[NotNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.RelayedEventAttribute.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.RelayedEventAttribute" /> class.
            </summary>
            <param name="sourceType">Type of the source for the events.<p /><c>[NotNull]</c></param>
            <param name="sourceName">Name of the source property. You need to specify this only if the source property name is different.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="P:TomsToolbox.Wpf.RelayedEventAttribute.SourceType">
            <summary>
            Gets the type of the source for the events.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.RelayedEventAttribute.SourceName">
            <summary>
            Gets the name of the source property, or null if the name is the same as the target property.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="T:TomsToolbox.Wpf.ResourceKeys">
            <summary>
            A static class providing the resource keys for the theme resources.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.ResourceKeys.AutoToolTipTextBoxStyle">
            <summary>
            A style for text boxes that automatically sets the tool tip if the text is trimmed.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.ResourceKeys.SharedWidthContainerStyle">
            <summary>
            Resource key for a style applying a shared with to associated container controls.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.ResourceKeys.ListBoxItemCheckBoxStyle">
            <summary>
            List box/list view with check boxes: Style to be applied to the check box inside item or cell template. See e.g. http://msdn.microsoft.com/en-us/library/ms754143.aspx.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.ResourceKeys.DataGridRowCheckBoxStyle">
            <summary>
            Data grid with check boxes for row selection: Style to be applied to the check box inside the row header template.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.ResourceKeys.DataGridCellStyle">
            <summary>
            A copy of the original data grid cell style, extended with VerticalAlignment binding to control the vertical alignment of the content via the DataGrid.VerticalContentAlignment property. Also adds support for padding.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.ResourceKeys.ControlWithValidationErrorToolTipStyle">
            <summary>
            A control that shows validation errors in the tool tip.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="T:TomsToolbox.Wpf.SelectorExtensions">
            <summary>
            Extensions for the <see cref="T:System.Windows.Controls.Primitives.Selector" />
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.SelectorExtensions.GetTrackSelection(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:TomsToolbox.Wpf.SelectorExtensions.TrackSelection" /> attached property.
            </summary>
            <param name="obj">The selector.<p /><c>[NotNull]</c></param>
            <returns><c>true</c> if the selection should be tracked; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.SelectorExtensions.SetTrackSelection(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets the value of the <see cref="P:TomsToolbox.Wpf.SelectorExtensions.TrackSelection" /> attached property.
            </summary>
            <param name="obj">The object.<p /><c>[NotNull]</c></param>
            <param name="value">if set to <c>true</c> if the selection should be tracked; otherwise <c>false</c>.</param>
        </member>
        <member name="F:TomsToolbox.Wpf.SelectorExtensions.TrackSelectionProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.SelectorExtensions.TrackSelection" /> attached property
            <p /><c>[NotNull]</c></summary>
            <AttachedPropertyComments>
            <summary>
            A value indicating whether selection should be tracked or not.
            </summary>
            <remarks>
            When a <see cref="T:System.Windows.Controls.Primitives.Selector" /> is embedded in a dynamic page, e.g. another selector,
            the visual is recreated or reused with another data context whenever the page is displayed.
            <para />
            TrackSelection links the selected index with the view model (DataContext) of the selector,
            restoring the cached index whenever the same view model is displayed.
            If no index is cached, the first item will be selected.
            </remarks>
            </AttachedPropertyComments>
        </member>
        <member name="T:TomsToolbox.Wpf.InputBindingTemplate">
            <summary>
            A container to host the source <see cref="T:System.Windows.Input.InputBindingCollection" />. Must be a <see cref="T:System.Windows.FrameworkElement" /> to minimize binding errors.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.BehaviorCollection">
            <summary>
            A collection of <see cref="T:Microsoft.Xaml.Behaviors.Behavior" /> objects.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.TriggerCollection">
            <summary>
            A collection of Trigger (<see cref="T:Microsoft.Xaml.Behaviors.TriggerBase" />) objects.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.GroupDescriptionCollection">
            <summary>
            A collection of <see cref="T:System.ComponentModel.GroupDescription" /> objects.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.GroupStyleCollection">
            <summary>
            A collection of <see cref="T:System.Windows.Controls.GroupStyle" /> objects.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.ColumnDefinitionCollection">
            <summary>
            A collection of <see cref="T:System.Windows.Controls.ColumnDefinition" /> objects.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.RowDefinitionCollection">
            <summary>
            A collection of <see cref="T:System.Windows.Controls.RowDefinition" /> objects.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.StyleBindings">
            <summary>
            Extensions to support style binding of some read only collection properties.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.StyleBindings.GetInputBindings(System.Windows.DependencyObject)">
            <summary>
            Gets the inputBindings attached via the <see cref="P:TomsToolbox.Wpf.StyleBindings.InputBindings" /> attached property.
            <p /><c>[CanBeNull]</c></summary>
            <param name="obj">The object the inputBindings are attached to.<p /><c>[NotNull]</c></param>
            <returns>The inputBindings.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.StyleBindings.SetInputBindings(System.Windows.DependencyObject,TomsToolbox.Wpf.InputBindingTemplate)">
            <summary>
            Sets the inputBindings attached via the <see cref="P:TomsToolbox.Wpf.StyleBindings.InputBindings" /> attached property.
            </summary>
            <param name="obj">The object the inputBindings are attached to.<p /><c>[NotNull]</c></param>
            <param name="value">The inputBindings to attach.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="F:TomsToolbox.Wpf.StyleBindings.InputBindingsProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.StyleBindings.InputBindings" /> attached property.
            <p /><c>[NotNull]</c></summary>
            <AttachedPropertyComments>
            <summary>
            This property is needed to set <see cref="P:System.Windows.UIElement.InputBindings" /> via a <see cref="T:System.Windows.Style" />
            </summary>
            <example><code language="XAML"><![CDATA[
            <Style TargetType="ListBoxItem">
              <Setter Property="wpf:StyleBindings.InputBindings">
                <Setter.Value>
                  <wpf:InputBindingTemplate>
                    <KeyBinding .... />
                    <MouseBinding .... />
                  </core:InputBindingTemplate>
                </Setter.Value>
              </Setter>
            ]]>
            </code></example>
            </AttachedPropertyComments>
        </member>
        <member name="M:TomsToolbox.Wpf.StyleBindings.GetGroupStyles(System.Windows.DependencyObject)">
            <summary>
            Gets the group styles attached via the <see cref="P:TomsToolbox.Wpf.StyleBindings.GroupStyles" /> attached property.
            <p /><c>[CanBeNull, ItemNotNull]</c></summary>
            <param name="obj">The object the group style is attached to.<p /><c>[NotNull]</c></param>
            <returns>The group styles.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.StyleBindings.SetGroupStyles(System.Windows.DependencyObject,TomsToolbox.Wpf.GroupStyleCollection)">
            <summary>
            Sets the group style attached via the <see cref="P:TomsToolbox.Wpf.StyleBindings.GroupStyles" /> attached property.
            </summary>
            <param name="obj">The object the group style is attached to.<p /><c>[NotNull]</c></param>
            <param name="value">The group styles.<p /><c>[CanBeNull, ItemNotNull]</c></param>
        </member>
        <member name="F:TomsToolbox.Wpf.StyleBindings.GroupStylesProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.StyleBindings.GroupStyles" /> attached property.
            <p /><c>[NotNull]</c></summary>
            <AttachedPropertyComments>
            <summary>
            This property is needed to set <see cref="P:System.Windows.Controls.ItemsControl.GroupStyle" /> via a <see cref="T:System.Windows.Style" />
            </summary>
            <example><code language="XAML"><![CDATA[
            <Style TargetType="ListBox">
              <Setter Property="wpf:StyleBindings.GroupStyles">
                <Setter.Value>
                  <GroupStyleCollection>
                    <GroupStyle>
                      < .... />
                    <GroupStyle>
                  </GroupStyleCollection>
                </Setter.Value>
              </Setter>
            ]]>
            </code></example>
            </AttachedPropertyComments>
        </member>
        <member name="M:TomsToolbox.Wpf.StyleBindings.GetGroupStyle(System.Windows.DependencyObject)">
            <summary>
            Gets the group style attached via the <see cref="P:TomsToolbox.Wpf.StyleBindings.GroupStyle" /> attached property.
            <p /><c>[CanBeNull]</c></summary>
            <param name="obj">The object the group style is attached to.<p /><c>[NotNull]</c></param>
            <returns>The group style.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.StyleBindings.SetGroupStyle(System.Windows.DependencyObject,System.Windows.Controls.GroupStyle)">
            <summary>
            Sets the group style attached via the <see cref="P:TomsToolbox.Wpf.StyleBindings.GroupStyle" /> attached property.
            </summary>
            <param name="obj">The object the group style is attached to.<p /><c>[NotNull]</c></param>
            <param name="value">The group style.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="F:TomsToolbox.Wpf.StyleBindings.GroupStyleProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.StyleBindings.GroupStyle" /> attached property.
            <p /><c>[NotNull]</c></summary>
            <AttachedPropertyComments>
            <summary>
            This property is needed to set a single <see cref="P:System.Windows.Controls.ItemsControl.GroupStyle" /> via a <see cref="T:System.Windows.Style" />.
            This a shortcut to <see cref="P:TomsToolbox.Wpf.StyleBindings.GroupStyles" /> to simplify usage when only one group style is needed.
            </summary>
            <example><code language="XAML"><![CDATA[
            <Style TargetType="ListBox">
              <Setter Property="wpf:StyleBindings.GroupStyle">
                <Setter.Value>
                  <GroupStyle>
                    < .... />
                  <GroupStyle>
                </Setter.Value>
              </Setter>
            ]]>
            </code></example>
            </AttachedPropertyComments>
        </member>
        <member name="M:TomsToolbox.Wpf.StyleBindings.GetGroupDescriptions(System.Windows.DependencyObject)">
            <summary>
            Gets the group descriptions attached via the <see cref="P:TomsToolbox.Wpf.StyleBindings.GroupDescriptions" /> attached property.
            <p /><c>[CanBeNull, ItemNotNull]</c></summary>
            <param name="obj">The object the group descriptions are attached to.<p /><c>[NotNull]</c></param>
            <returns>The group descriptions.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.StyleBindings.SetGroupDescriptions(System.Windows.DependencyObject,System.Collections.Generic.ICollection{System.ComponentModel.GroupDescription})">
            <summary>
            Sets the group descriptions attached via the <see cref="P:TomsToolbox.Wpf.StyleBindings.GroupDescriptions" /> attached property.
            </summary>
            <param name="obj">The object the group descriptions are attached to.<p /><c>[NotNull]</c></param>
            <param name="value">The group descriptions.<p /><c>[CanBeNull, ItemNotNull]</c></param>
        </member>
        <member name="F:TomsToolbox.Wpf.StyleBindings.GroupDescriptionsProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.StyleBindings.GroupDescriptions" /> attached property.
            <p /><c>[NotNull]</c></summary>
            <AttachedPropertyComments>
            <summary>
            This property is needed to set <see cref="P:System.Windows.Controls.ItemCollection.GroupDescriptions" /> for an <see cref="T:System.Windows.Controls.ItemsControl" /> via a <see cref="T:System.Windows.Style" />
            </summary>
            <example><code language="XAML"><![CDATA[
            <Style TargetType="ListBox">
              <Setter Property="wpf:StyleBindings.GroupDescriptions">
                <Setter.Value>
                  <GroupDescriptionCollection>
                    < .... />
                  <GroupDescriptionCollection>
                </Setter.Value>
              </Setter>
            ]]>
            </code></example>
            </AttachedPropertyComments>
        </member>
        <member name="M:TomsToolbox.Wpf.StyleBindings.GetBehaviors(System.Windows.DependencyObject)">
            <summary>
            Gets the behaviors attached via the <see cref="P:TomsToolbox.Wpf.StyleBindings.Behaviors" /> attached property.
            <p /><c>[CanBeNull, ItemNotNull]</c></summary>
            <param name="obj">The object the behaviors are attached to.<p /><c>[NotNull]</c></param>
            <returns>The behaviors.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.StyleBindings.SetBehaviors(System.Windows.DependencyObject,TomsToolbox.Wpf.BehaviorCollection)">
            <summary>
            Sets the behaviors attached via the <see cref="P:TomsToolbox.Wpf.StyleBindings.Behaviors" /> attached property.
            </summary>
            <param name="obj">The object the behaviors are attached to.<p /><c>[NotNull]</c></param>
            <param name="value">The behaviors to attach.<p /><c>[CanBeNull, ItemNotNull]</c></param>
        </member>
        <member name="F:TomsToolbox.Wpf.StyleBindings.BehaviorsProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.StyleBindings.Behaviors" /> attached property.
            <p /><c>[NotNull]</c></summary>
            <AttachedPropertyComments>
            <summary>
            This property is needed to set behaviors via a <see cref="T:System.Windows.Style" />
            </summary>
            <example><code language="XAML"><![CDATA[
            <Style TargetType="MenuItem">
              <Setter Property="core:StyleBindings.Behaviors">
                <Setter.Value>
                  <core:BehaviorCollection>
                    <core:ItemsControlCompositionBehavior RegionId="{Binding SubRegionId}"/>
                  </core:BehaviorCollection>
                </Setter.Value>
              </Setter>
            ]]>
            </code></example>
            </AttachedPropertyComments>
        </member>
        <member name="M:TomsToolbox.Wpf.StyleBindings.GetTriggers(System.Windows.DependencyObject)">
            <summary>
            Gets the triggers attached via the <see cref="P:TomsToolbox.Wpf.StyleBindings.Triggers" /> attached property.
            <p /><c>[CanBeNull, ItemNotNull]</c></summary>
            <param name="obj">The object the triggers are attached to.<p /><c>[NotNull]</c></param>
            <returns>The triggers.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.StyleBindings.SetTriggers(System.Windows.DependencyObject,TomsToolbox.Wpf.TriggerCollection)">
            <summary>
            Sets the triggers attached via the <see cref="P:TomsToolbox.Wpf.StyleBindings.Triggers" /> attached property.
            </summary>
            <param name="obj">The obj.<p /><c>[NotNull]</c></param>
            <param name="value">The value.<p /><c>[CanBeNull, ItemNotNull]</c></param>
        </member>
        <member name="F:TomsToolbox.Wpf.StyleBindings.TriggersProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.StyleBindings.Triggers" /> attached property.
            <p /><c>[NotNull]</c></summary>
            <AttachedPropertyComments>
            <summary>
            This property is needed to set triggers via a <see cref="T:System.Windows.Style" />
            </summary>
            <example><code language="XAML"><![CDATA[
            <Style TargetType="MenuItem">
              <Setter Property="core:StyleBindings.Triggers">
                <Setter.Value>
                  <core:TriggerCollection>
                    <interactivity:EventTrigger EventName="Loaded">
                      <interactivity:EventTrigger.Actions>
                        ....
                      </interactivity:EventTrigger.Actions>
                    </interactivity:EventTrigger>
                  </core:TriggerCollection>
                </Setter.Value>
              </Setter>
            ]]>
            </code></example>
            </AttachedPropertyComments>
        </member>
        <member name="M:TomsToolbox.Wpf.StyleBindings.GetColumnDefinitions(System.Windows.DependencyObject)">
            <summary>
            Gets the column definitions attached via the <see cref="P:TomsToolbox.Wpf.StyleBindings.ColumnDefinitions" /> attached property.
            <p /><c>[CanBeNull, ItemNotNull]</c></summary>
            <param name="obj">The object the column definitions are attached to.<p /><c>[NotNull]</c></param>
            <returns>The column definitions.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.StyleBindings.SetColumnDefinitions(System.Windows.DependencyObject,TomsToolbox.Wpf.ColumnDefinitionCollection)">
            <summary>
            Sets the columnDefinitions attached via the <see cref="P:TomsToolbox.Wpf.StyleBindings.ColumnDefinitions" /> attached property.
            </summary>
            <param name="obj">The obj.<p /><c>[NotNull]</c></param>
            <param name="value">The value.<p /><c>[CanBeNull, ItemNotNull]</c></param>
        </member>
        <member name="F:TomsToolbox.Wpf.StyleBindings.ColumnDefinitionsProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.StyleBindings.ColumnDefinitions" /> attached property.
            <p /><c>[NotNull]</c></summary>
            <AttachedPropertyComments>
            <summary>
            This property is needed to set column definitions via a <see cref="T:System.Windows.Style" /> or from a resource.
            </summary>
            <example><code language="XAML"><![CDATA[
            <Style TargetType="Grid">
              <Setter Property="core:StyleBindings.ColumnDefinitions">
                <Setter.Value>
                  <core:ColumnDefinitionCollection>
                    <ColumnDefinition Width="Auto" SharedSizeGroup="Col1" />
                    <ColumnDefinition Width="20" />
                    <ColumnDefinition Width="*" />
                  </core:ColumnDefinitionCollection>
                </Setter.Value>
              </Setter>
            ]]>
            </code></example>
            </AttachedPropertyComments>
        </member>
        <member name="M:TomsToolbox.Wpf.StyleBindings.GetRowDefinitions(System.Windows.DependencyObject)">
            <summary>
            Gets the row definitions attached via the <see cref="P:TomsToolbox.Wpf.StyleBindings.RowDefinitions" /> attached property.
            <p /><c>[CanBeNull, ItemNotNull]</c></summary>
            <param name="obj">The object the row definitions are attached to.<p /><c>[NotNull]</c></param>
            <returns>The row definitions.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.StyleBindings.SetRowDefinitions(System.Windows.DependencyObject,TomsToolbox.Wpf.RowDefinitionCollection)">
            <summary>
            Sets the row definitions attached via the <see cref="P:TomsToolbox.Wpf.StyleBindings.RowDefinitions" /> attached property.
            </summary>
            <param name="obj">The obj.<p /><c>[NotNull]</c></param>
            <param name="value">The value.<p /><c>[CanBeNull, ItemNotNull]</c></param>
        </member>
        <member name="F:TomsToolbox.Wpf.StyleBindings.RowDefinitionsProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.StyleBindings.RowDefinitions" /> attached property.
            <p /><c>[NotNull]</c></summary>
            <AttachedPropertyComments>
            <summary>
            This property is needed to set row definitions via a <see cref="T:System.Windows.Style" /> or from a resource.
            </summary>
            <example><code language="XAML"><![CDATA[
            <Style TargetType="Grid">
              <Setter Property="core:StyleBindings.RowDefinitions">
                <Setter.Value>
                  <core:RowDefinitionCollection>
                    <RowDefinition Height="Auto" SharedSizeGroup="Col1" />
                    <RowDefinition Height="20" />
                    <RowDefinition Height="*" />
                  </core:RowDefinitionCollection>
                </Setter.Value>
              </Setter>
            ]]>
            </code></example>
            </AttachedPropertyComments>
        </member>
        <member name="T:TomsToolbox.Wpf.TableHelper">
            <summary>
            Helper methods to parse or create text representations of a table.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.TableHelper.TextColumnSeparator">
            <summary>
            The text column separator
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.TableHelper.CsvColumnSeparator">
            <summary>
            Gets the effective CSV column separator for the current culture.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.TableHelper.ToTextString(System.Collections.Generic.IList{System.Collections.Generic.IList{System.String}})">
            <summary>
            Converts a table to a tab separated text string.
            <p /><c>[NotNull]</c></summary>
            <param name="table">The table.<p /><c>[NotNull, ItemNotNull]</c></param>
            <returns>The string representation of the table.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.TableHelper.ToCsvString(System.Collections.Generic.IList{System.Collections.Generic.IList{System.String}})">
            <summary>
            Converts a table to a comma separated text string.
            <p /><c>[NotNull]</c></summary>
            <param name="table">The table.<p /><c>[NotNull, ItemNotNull]</c></param>
            <returns>The string representation of the table.</returns>
            <remarks>The separator is culture specific, i.e. if the NumberDecimalSeparator is a comma, a semicolon is used</remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.TableHelper.ToString(System.Collections.Generic.IList{System.Collections.Generic.IList{System.String}},System.Char)">
            <summary>
            Converts a table to a separated text string.
            <p /><c>[NotNull]</c></summary>
            <param name="table">The table.<p /><c>[NotNull, ItemNotNull]</c></param>
            <param name="separator">The column separator.</param>
            <returns>
            The string representation of the table.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.TableHelper.Quoted(System.String,System.Char)">
            <summary>
            Quotes the specified value.
            <p /><c>[NotNull]</c></summary>
            <param name="value">The value.<p /><c>[CanBeNull]</c></param>
            <param name="separator">The separator.</param>
            <returns>A quoted string if the string requires quoting; otherwise the original string.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.TableHelper.ParseTable(System.String,System.Char)">
            <summary>
            Parses the text representation of a table.
            <p /><c>[CanBeNull, ItemNotNull]</c></summary>
            <param name="text">The text.<p /><c>[NotNull]</c></param>
            <param name="separator">The column separator.</param>
            <returns>The table.</returns>
        </member>
        <member name="T:TomsToolbox.Wpf.TextBlockHelper">
            <summary>
            Attached property provider which adds the read-only attached property <see cref="F:TomsToolbox.Wpf.TextBlockHelper.IsTextTrimmedProperty" /> to
            the framework's <see cref="T:System.Windows.Controls.TextBlock" /> control.
            Can be used to e.g. show a dynamic tool tip with the full text, that shows up only if the text is really trimmed.
            </summary>
            <remarks>
            Remember to use NotifyOnTargetUpdated=True for bindings, if you need the <see cref="T:TomsToolbox.Wpf.TextBlockHelper" /> to react to changes to the TextBlock.Text property!
            </remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.TextBlockHelper.GetIsTextTrimmed(System.Windows.DependencyObject)">
            <summary>
            Gets the value of the <see cref="P:TomsToolbox.Wpf.TextBlockHelper.IsTextTrimmed" /> attached property.
            </summary>
            <param name="obj">The text block.<p /><c>[NotNull]</c></param>
            <returns><c>true</c> if text trimmed inside the text block; otherwise <c>false</c></returns>
        </member>
        <member name="F:TomsToolbox.Wpf.TextBlockHelper.IsTextTrimmedProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.TextBlockHelper.IsTextTrimmed" /> attached property
            <p /><c>[NotNull]</c></summary>
            <AttachedPropertyComments>
            <summary>
            If the <see cref="P:TomsToolbox.Wpf.TextBlockHelper.IsAutomaticToolTipEnabled" /> attached property is set to <c>true</c> on a text block, this property
            reflects if the text inside the text block is trimmed, i.e. not fully visible.
            </summary>
            </AttachedPropertyComments>
        </member>
        <member name="M:TomsToolbox.Wpf.TextBlockHelper.GetIsAutomaticToolTipEnabled(System.Windows.DependencyObject)">
            <summary>
            Gets a value indicating if the automatic tool tip is enabled on this text block or not.
            </summary>
            <param name="obj">The <see cref="T:System.Windows.Controls.TextBlock" /> to evaluate.<p /><c>[NotNull]</c></param>
            <returns><c>true</c> if the automatic tool tip is enabled; otherwise <c>false</c></returns>
        </member>
        <member name="M:TomsToolbox.Wpf.TextBlockHelper.SetIsAutomaticToolTipEnabled(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets a value indicating if the automatic tool tip is enabled on this text block or not.
            </summary>
            <param name="obj">The <see cref="T:System.Windows.Controls.TextBlock" /> to evaluate.<p /><c>[NotNull]</c></param>
            <param name="value"><c>true</c> to enable the automatic tool tip; otherwise <c>false</c></param>
        </member>
        <member name="F:TomsToolbox.Wpf.TextBlockHelper.IsAutomaticToolTipEnabledProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.TextBlockHelper.IsAutomaticToolTipEnabled" /> attached property.
            <p /><c>[NotNull]</c></summary>
            <AttachedPropertyComments>
            <summary>
            Set this property to <c>true</c> to enable automatic evaluation of the <see cref="P:TomsToolbox.Wpf.TextBlockHelper.IsTextTrimmed" /> attached property.
            This property is used by the style identified with the <see cref="F:TomsToolbox.Wpf.ResourceKeys.AutoToolTipTextBoxStyle" /> to display of a tool tip only if the text of the text block is trimmed.
            </summary>
            </AttachedPropertyComments>
        </member>
        <member name="M:TomsToolbox.Wpf.TextBlockHelper.TextBlock_SizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Event handler for TextBlock's SizeChanged routed event. Triggers evaluation of the IsTextTrimmed attached property.
            </summary>
            <param name="sender">Object where the event handler is attached</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:TomsToolbox.Wpf.TextBlockHelper.Binding_TargetUpdated(System.Object,System.Windows.Data.DataTransferEventArgs)">
            <summary>
            Event handler for TextBlock's TargetUpdated routed event. Triggers evaluation of the
            IsTextTrimmed attached property.
            </summary>
            <param name="sender">Object where the event handler is attached</param>
            <param name="e">Event data</param>
        </member>
        <member name="M:TomsToolbox.Wpf.TextBlockHelper.UpdateIsTextTrimmed(System.Windows.Controls.TextBlock)">
            <summary>
            Update the value of IsTextTrimmed.
            </summary>
            <param name="textBlock">The text block</param>
        </member>
        <member name="M:TomsToolbox.Wpf.TextBlockHelper.EvaluateIsTextTrimmed(System.Windows.Controls.TextBlock)">
            <summary>
            Determines whether or not the text in <paramref name="textBlock" /> is currently being trimmed due to width or height constraints.
            </summary>
            <param name="textBlock">The <see cref="T:System.Windows.Controls.TextBlock" /> to evaluate.</param>
            <returns><c>true</c> if the text is currently being trimmed; otherwise <c>false</c></returns>
        </member>
        <member name="T:TomsToolbox.Wpf.WhiteSpaces">
            <summary>
            Classifies white spaces in plain text.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.WhiteSpaces.None">
            <summary>
            No white space
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.WhiteSpaces.Paragraph">
            <summary>
            Paragraphs (i.e. line breaks)
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.WhiteSpaces.Space">
            <summary>
            Spaces
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.WhiteSpaces.Tab">
            <summary>
            Tab characters
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.WhiteSpaces.All">
            <summary>
            All white space
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator">
            <summary>
            Makes white space in text boxes visible.
            </summary>
            <example>
            Surround a <see cref="T:System.Windows.Controls.TextBox" /> with the decorator to make white space visible:<para />
            <code language="XAML"><![CDATA[
            <local:TextBoxVisibleWhiteSpaceDecorator WhiteSpaces="Paragraph,Space,Tab">
              <TextBox TextWrapping="Wrap" AcceptsReturn="True" AcceptsTab="True"/>
            </local:TextBoxVisibleWhiteSpaceDecorator>
            ]]></code></example>
        </member>
        <member name="M:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator" /> class.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.WhiteSpaces">
            <summary>
            Gets or sets the white spaces to show.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.WhiteSpacesProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.WhiteSpaces" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.WhiteSpaceColor">
            <summary>
            Gets or sets the color of the white space visualization.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.WhiteSpaceColorProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.WhiteSpaceColor" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.WhiteSpaceOpacity">
            <summary>
            Gets or sets the opacity of the white space visualization.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.WhiteSpaceOpacityProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.WhiteSpaceOpacity" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.Child">
            <summary>
            Gets or sets the inner text box.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.LogicalChildren">
            <inheritdoc />
        </member>
        <member name="M:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.GetVisualChild(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.VisualChildrenCount">
            <inheritdoc />
        </member>
        <member name="M:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:TomsToolbox.Wpf.TextBoxVisibleWhiteSpaceDecorator.ArrangeOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="T:TomsToolbox.Wpf.TextValidationEventArgs">
            <summary>
            Event argument for text validation events.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.TextValidationEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.TextValidationEventArgs" /> class.
            </summary>
            <param name="text">The text to validate.<p /><c>[CanBeNull]</c></param>
        </member>
        <member name="P:TomsToolbox.Wpf.TextValidationEventArgs.Text">
            <summary>
            Gets the text to validate.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.TextValidationEventArgs.Action">
            <summary>
            Gets or sets the action to take.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.TextValidationAction">
            <summary>
            The action to be taken after text validation.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.TextValidationAction.None">
            <summary>
            The text is OK, nothing to do.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.TextValidationAction.Error">
            <summary>
            The text contains errors and should be highlighted.
            </summary>
        </member>
        <member name="F:TomsToolbox.Wpf.TextValidationAction.Undo">
            <summary>
            The text contains errors, the last change should be undone.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.ForegroundThreadWithDispatcher">
            <summary>
            A dedicated thread hosting an active dispatcher.
            The thread will be created as foreground thread, so this object must be explicitly disposed before the application can shut down.
            </summary>
            <remarks>
            Use this thread to dispatch or serialize background operations, or to host COM objects that don't have a free threaded marshaller.
            </remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.ForegroundThreadWithDispatcher.#ctor(System.String,System.Threading.ApartmentState)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.ForegroundThreadWithDispatcher" /> class with normal thread priority.
            </summary>
            <param name="name">The name of the thread.<p /><c>[NotNull]</c></param>
            <param name="state">The apartment state of the thread.</param>
        </member>
        <member name="M:TomsToolbox.Wpf.ForegroundThreadWithDispatcher.#ctor(System.String,System.Threading.ApartmentState,System.Threading.ThreadPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.ForegroundThreadWithDispatcher" /> class.
            </summary>
            <param name="name">The name of the thread.<p /><c>[NotNull]</c></param>
            <param name="state">The apartment state of the thread.</param>
            <param name="priority">The priority of the thread.</param>
        </member>
        <member name="P:TomsToolbox.Wpf.ForegroundThreadWithDispatcher.ShutdownPriority">
            <summary>
            Gets or sets the shutdown priority passed to <see cref="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)" /> when the object is disposed. The default is <see cref="F:System.Windows.Threading.DispatcherPriority.Normal" />
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.ForegroundThreadWithDispatcher.Dispose">
            <summary>
            Shut down the dispatcher and wait for the thread to terminate.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.ForegroundThreadWithDispatcher.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:TomsToolbox.Wpf.ForegroundThreadWithDispatcher" /> class.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.BackgroundThreadWithDispatcher">
            <summary>
            A dedicated thread hosting an active dispatcher.
            The thread will be created as background thread, so it does not need to be shut down explicitly.
            </summary>
            <remarks>
            Use this thread to dispatch or serialize background operations, or to host COM objects that don't have a free threaded marshaller.
            A background thread will be killed by the system when the application terminates, so do not host objects in a background thread that need cleanup!
            </remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.BackgroundThreadWithDispatcher.#ctor(System.String,System.Threading.ApartmentState)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.BackgroundThreadWithDispatcher" /> class.
            </summary>
            <param name="name">The name of the thread.<p /><c>[NotNull]</c></param>
            <param name="state">The apartment state of the thread.</param>
        </member>
        <member name="M:TomsToolbox.Wpf.BackgroundThreadWithDispatcher.#ctor(System.String,System.Threading.ApartmentState,System.Threading.ThreadPriority)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.BackgroundThreadWithDispatcher" /> class.
            </summary>
            <param name="name">The name of the thread.<p /><c>[NotNull]</c></param>
            <param name="state">The apartment state of the thread.</param>
            <param name="priority">The priority of the thread.</param>
        </member>
        <member name="T:TomsToolbox.Wpf.ThreadWithDispatcher">
            <summary>
            A dedicated thread hosting an active dispatcher.
            <para />
            Creates a thread and starts a dispatcher in this thread. The dispatcher is only accessible after it's fully started.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.ThreadWithDispatcher.#ctor(System.String,System.Threading.ApartmentState,System.Threading.ThreadPriority,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.ThreadWithDispatcher" /> class.
            </summary>
            <param name="name">The name.<p /><c>[NotNull]</c></param>
            <param name="state">The state.</param>
            <param name="priority">The priority.</param>
            <param name="isBackgroundThread">if set to <c>true</c> it the thread should be created as background thread.</param>
        </member>
        <member name="P:TomsToolbox.Wpf.ThreadWithDispatcher.Dispatcher">
            <summary>
            Gets the dispatcher of the thread.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.ThreadWithDispatcher.TaskScheduler">
            <summary>
            Gets the task scheduler associated with the <see cref="P:TomsToolbox.Wpf.ThreadWithDispatcher.Dispatcher" />
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="E:TomsToolbox.Wpf.ThreadWithDispatcher.Terminated">
            <summary>
            Occurs when the dispatcher is terminated.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.ThreadWithDispatcher.Invoke``1(System.Func{``0})">
            <summary>
            Invokes the specified method in the dispatcher thread.
            <p /><c>[CanBeNull]</c></summary>
            <typeparam name="T">The return type of the method.</typeparam>
            <param name="method">The method.<p /><c>[NotNull]</c></param>
            <returns>The result of the method.</returns>
            <exception cref="T:System.InvalidOperationException">The dispatcher has already shut down.</exception>
            <remarks>Exceptions thrown by <paramref name="method" /> are passed back to the caller and are not wrapped into a <see cref="T:System.Reflection.TargetInvocationException" />.</remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.ThreadWithDispatcher.Invoke(System.Action)">
            <summary>
            Invokes the specified method in the dispatcher thread.
            </summary>
            <param name="method">The method.<p /><c>[NotNull]</c></param>
            <exception cref="T:System.InvalidOperationException">The dispatcher has already shut down.</exception>
            <remarks>Exceptions thrown by <paramref name="method" /> are passed back to the caller and are not wrapped into a <see cref="T:System.Reflection.TargetInvocationException" />.</remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.ThreadWithDispatcher.BeginInvoke(System.Action)">
            <summary>
            Invokes the specified method asynchronously in the dispatcher thread.
            <p /><c>[NotNull]</c></summary>
            <param name="method">The method.<p /><c>[NotNull]</c></param>
            <returns>The dispatcher operation to track the outcome of the call.</returns>
            <exception cref="T:System.InvalidOperationException">The dispatcher has already shut down.</exception>
        </member>
        <member name="M:TomsToolbox.Wpf.ThreadWithDispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Action)">
            <summary>
            Invokes the specified method asynchronously in the dispatcher thread.
            <p /><c>[NotNull]</c></summary>
            <param name="priority">The priority to use.</param>
            <param name="method">The method.<p /><c>[NotNull]</c></param>
            <returns>The dispatcher operation to track the outcome of the call.</returns>
            <exception cref="T:System.InvalidOperationException">The dispatcher has already shut down.</exception>
        </member>
        <member name="M:TomsToolbox.Wpf.ThreadWithDispatcher.VerifyAccess">
            <summary>
            Determines whether the calling thread has access to this <see cref="T:System.Windows.Threading.Dispatcher" />.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The calling thread does not have access to this <see cref="T:System.Windows.Threading.Dispatcher" />.
            </exception>
        </member>
        <member name="M:TomsToolbox.Wpf.ThreadWithDispatcher.CheckAccess">
            <summary>
            Determines whether the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />.
            </summary>
            <returns>true if the calling thread is the thread associated with this <see cref="T:System.Windows.Threading.Dispatcher" />; otherwise, false.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.ThreadWithDispatcher.BeginShutdown(System.Windows.Threading.DispatcherPriority)">
            <summary>
            Initiates shutdown of the <see cref="T:System.Windows.Threading.Dispatcher" /> asynchronously.
            </summary>
            <param name="priority">The priority at which to begin shutdown.</param>
        </member>
        <member name="M:TomsToolbox.Wpf.ThreadWithDispatcher.Join">
            <summary>
            Blocks the calling thread until the <see cref="T:System.Windows.Threading.Dispatcher" /> terminates.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.ThreadWithDispatcher.Join(System.TimeSpan)">
            <summary>
            Blocks the calling thread until the <see cref="T:System.Windows.Threading.Dispatcher" /> terminates.
            </summary>
            <param name="timeout">The timeout.</param>
            <returns>
            true if the thread terminated; false if the thread has not terminated after the amount of time specified by the <paramref name="timeout" /> parameter has elapsed.
            </returns>
        </member>
        <member name="M:TomsToolbox.Wpf.ThreadWithDispatcher.Abort">
            <summary>
            Aborts this instance.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.Throttle">
            <summary>
            Implements a simple timed throttle.<para />
            Calling <see cref="M:TomsToolbox.Wpf.Throttle.Tick" /> multiple times will restart the timer; there will be one single 
            call to the action when the delay time has elapsed after the last tick.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.Throttle.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Throttle" /> class with a default timeout of 100ms.
            </summary>
            <param name="target">The target action to invoke when the throttle condition is hit.<p /><c>[NotNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.Throttle.#ctor(System.TimeSpan,System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.Throttle" /> class.
            </summary>
            <param name="timeout">The timeout to wait for after the last <see cref="M:TomsToolbox.Wpf.Throttle.Tick" />.</param>
            <param name="target">The target action to invoke when the throttle condition is hit.<p /><c>[NotNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.Throttle.Tick">
            <summary>
            Ticks this instance to trigger the throttle.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.VirtualizingDoubleClickPanel">
            <summary>
            A virtualizing panel that raises MouseDoubleClick events like the <see cref="T:System.Windows.Controls.Control" />.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.VirtualizingDoubleClickPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.VirtualizingDoubleClickPanel" /> class.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.VirtualizingDoubleClickPanel.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="F:System.Windows.Controls.Control.MouseDoubleClickEvent" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> instance containing the event data.<p /><c>[NotNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.VirtualizingDoubleClickPanel.OnPreviewMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="F:System.Windows.Controls.Control.PreviewMouseDoubleClickEvent" /> event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> instance containing the event data.<p /><c>[NotNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.VirtualizingDoubleClickPanel.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown" /> routed event is raised on this element. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
        </member>
        <member name="M:TomsToolbox.Wpf.VirtualizingDoubleClickPanel.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseLeftButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the left mouse button was pressed.</param>
        </member>
        <member name="M:TomsToolbox.Wpf.VirtualizingDoubleClickPanel.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was pressed.</param>
        </member>
        <member name="M:TomsToolbox.Wpf.VirtualizingDoubleClickPanel.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.PreviewMouseRightButtonDown" /> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs" /> that contains the event data. The event data reports that the right mouse button was pressed.</param>
        </member>
        <member name="T:TomsToolbox.Wpf.VisualExtensions">
            <summary>
            Extension methods to ease usage of <see cref="T:System.Windows.Media.Visual" /> object.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.VisualExtensions.BeginInvoke(System.Windows.Media.Visual,System.Action)">
            <summary>
            Invokes the specified method asynchronously in the dispatcher thread of the visual.
            <p /><c>[NotNull]</c></summary>
            <param name="visual">The visual.<p /><c>[NotNull]</c></param>
            <param name="method">The method.<p /><c>[NotNull]</c></param>
            <returns>The dispatcher operation to track the outcome of the call.</returns>
            <exception cref="T:System.InvalidOperationException">The dispatcher has already shut down.</exception>
            <remarks>
            <see cref="T:System.Windows.Threading.DispatcherObject" /> may have an empty Dispatcher, e.g. for <see cref="T:System.Windows.Freezable" /> objects, 
            thus calling DispatcherObject.Dispatcher.BeginInvoke is considered unsafe. However <see cref="T:System.Windows.Media.Visual" /> objects always 
            have a valid dispatcher, so calling Visual.BeginInvoke via this extension can be considered safe.
            </remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.VisualExtensions.BeginInvoke(System.Windows.Media.Visual,System.Windows.Threading.DispatcherPriority,System.Action)">
            <summary>
            Invokes the specified method asynchronously in the dispatcher thread of the visual.
            <p /><c>[NotNull]</c></summary>
            <param name="visual">The visual.<p /><c>[NotNull]</c></param>
            <param name="priority">The priority to use.</param>
            <param name="method">The method.<p /><c>[NotNull]</c></param>
            <returns>The dispatcher operation to track the outcome of the call.</returns>
            <exception cref="T:System.InvalidOperationException">The dispatcher has already shut down.</exception>
            <remarks>
            <see cref="T:System.Windows.Threading.DispatcherObject" /> may have an empty Dispatcher, e.g. for <see cref="T:System.Windows.Freezable" /> objects, 
            thus calling DispatcherObject.Dispatcher.BeginInvoke is considered unsafe. However <see cref="T:System.Windows.Media.Visual" /> objects always 
            have a valid dispatcher, so calling Visual.BeginInvoke via this extension can be considered safe.
            </remarks>
        </member>
        <member name="T:TomsToolbox.Wpf.WaitCursor">
            <summary>
            Helper class to ease automatic display of the wait cursor.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.WaitCursor.StartLocal(System.Windows.FrameworkElement)">
            <summary>
            Sets the cursor property of the framework element to the "Wait" cursor and
            automatically resets the cursor to the default cursor when the dispatcher becomes idle again.
            </summary>
            <param name="frameworkElement">The element on which to set the cursor.<p /><c>[NotNull]</c></param>
        </member>
        <member name="M:TomsToolbox.Wpf.WaitCursor.StartLocal(System.Windows.FrameworkElement,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Sets the cursor property of the framework element to the "Wait" cursor and
            automatically resets the cursor to the default cursor when the dispatcher becomes idle again.
            </summary>
            <param name="frameworkElement">The element on which to set the cursor.<p /><c>[NotNull]</c></param>
            <param name="priority">The dispatcher priority used for waiting.</param>
        </member>
        <member name="M:TomsToolbox.Wpf.WaitCursor.Start(System.Windows.FrameworkElement)">
            <summary>
            Sets the cursor property of the framework elements root visual to the "Wait" cursor and
            automatically resets the cursor to the default cursor when the dispatcher becomes idle again.
            </summary>
            <param name="frameworkElement">An element in the visual tree to start looking for the root visual.<p /><c>[NotNull]</c></param>
            <remarks>
            The root visual usually is the whole window, except for controls embedded in native or WindowsForms windows.
            </remarks>
        </member>
        <member name="M:TomsToolbox.Wpf.WaitCursor.Start(System.Windows.FrameworkElement,System.Windows.Threading.DispatcherPriority)">
            <summary>
            Sets the cursor property of the framework elements root visual to the "Wait" cursor and
            automatically resets the cursor to the default cursor when the dispatcher becomes idle again.
            </summary>
            <param name="frameworkElement">An element in the visual tree to start looking for the root visual.<p /><c>[NotNull]</c></param>
            <param name="priority">The dispatcher priority used for waiting.</param>
            <remarks>
            The root visual usually is the whole window, except for controls embedded in native or WindowsForms windows.
            </remarks>
        </member>
        <member name="T:TomsToolbox.Wpf.WindowCommands">
            <summary>
            Routed commands for window management.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.WindowCommands.Minimize">
            <summary>
            Gets the minimize window command.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.WindowCommands.Maximize">
            <summary>
            Gets the maximize window command.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.WindowCommands.Close">
            <summary>
            Gets the close window command.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.WindowCommands.Restore">
            <summary>
            Gets the restore window command.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="T:TomsToolbox.Wpf.XamlExtensions.Button">
            <summary>
            XAML extensions for the <see cref="T:System.Windows.Controls.Button" />
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.XamlExtensions.Button.GetDialogResult(System.Windows.Controls.Button)">
            <summary>
            Gets the dialog result associated with the button.
            </summary>
            <param name="button">The button.<p /><c>[NotNull]</c></param>
            <returns>The associated dialog result.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.XamlExtensions.Button.SetDialogResult(System.Windows.Controls.Button,System.Nullable{System.Boolean})">
            <summary>
            Sets the dialog result associated with the button.
            </summary>
            <param name="button">The button.<p /><c>[NotNull]</c></param>
            <param name="value">The associated dialog result.</param>
        </member>
        <member name="F:TomsToolbox.Wpf.XamlExtensions.Button.DialogResultProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.XamlExtensions.Button.DialogResult" /> attached property.
            <p /><c>[NotNull]</c></summary>
            <AttachedPropertyComments>
            <summary>
            Associates a dialog result with the button that it's attached to. 
            When the button is clicked, the <see cref="P:System.Windows.Window.DialogResult" /> of the Window is set.
            </summary>
            <remarks>
            This only has an effect if the window was created using the <see cref="M:System.Windows.Window.ShowDialog" /> method.
            </remarks>
            </AttachedPropertyComments>
        </member>
        <member name="T:TomsToolbox.Wpf.XamlExtensions.ColumnStyles">
            <summary>
            A class to manage the column styles of a <see cref="T:System.Windows.Controls.DataGrid" />
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.XamlExtensions.ColumnStyles.GetDefaultColumnStyles(System.Windows.Controls.DataGrid)">
            <summary>
            Gets the default column styles.
            <p /><c>[CanBeNull, ItemNotNull]</c></summary>
            <param name="dataGrid">The data grid.<p /><c>[NotNull]</c></param>
            <returns>The styles.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.XamlExtensions.ColumnStyles.SetDefaultColumnStyles(System.Windows.Controls.DataGrid,TomsToolbox.Wpf.XamlExtensions.DataGridColumnStyleCollection)">
            <summary>
            Sets the default column styles.
            </summary>
            <param name="dataGrid">The data grid.<p /><c>[NotNull]</c></param>
            <param name="value">The styles.<p /><c>[CanBeNull, ItemNotNull]</c></param>
        </member>
        <member name="F:TomsToolbox.Wpf.XamlExtensions.ColumnStyles.DefaultColumnStylesProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.XamlExtensions.ColumnStyles.DefaultColumnStyles" /> attached property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="T:TomsToolbox.Wpf.XamlExtensions.DataGridColumnStyleCollection">
            <summary>
            A collection of <see cref="T:TomsToolbox.Wpf.XamlExtensions.DataGridColumnStyle" /> objects.
            </summary>
        </member>
        <member name="T:TomsToolbox.Wpf.XamlExtensions.DataGridColumnStyle">
            <summary>
            Defines the column styles for a data grid column.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.XamlExtensions.DataGridColumnStyle.ColumnType">
            <summary>
            Gets or sets the type of the column for which to set the styles.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.XamlExtensions.DataGridColumnStyle.ElementStyle">
            <summary>
            Gets or sets the element style for the column.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.XamlExtensions.DataGridColumnStyle.ElementStyleProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.XamlExtensions.DataGridColumnStyle.ElementStyle" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.XamlExtensions.DataGridColumnStyle.EditingElementStyle">
            <summary>
            Gets or sets the editing element style for the column.
            <p /><c>[CanBeNull]</c></summary>
        </member>
        <member name="F:TomsToolbox.Wpf.XamlExtensions.DataGridColumnStyle.EditingElementStyleProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.XamlExtensions.DataGridColumnStyle.EditingElementStyle" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="T:TomsToolbox.Wpf.XamlExtensions.KeyboardNavigation">
            <summary>
            XAML helpers for keyboard navigation.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.XamlExtensions.KeyboardNavigation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TomsToolbox.Wpf.XamlExtensions.KeyboardNavigation" /> class.
            </summary>
        </member>
        <member name="P:TomsToolbox.Wpf.XamlExtensions.KeyboardNavigation.Current">
            <summary>
            Gets the singleton instance of the <see cref="T:TomsToolbox.Wpf.XamlExtensions.KeyboardNavigation" /> class.
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="P:TomsToolbox.Wpf.XamlExtensions.KeyboardNavigation.IsFocusVisualVisible">
            <summary>
            Gets or sets a value indicating whether the focus visual is visible on focused elements.
            </summary>
            <value>
            <c>true</c> if the focus visual is visible on focused elements; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="F:TomsToolbox.Wpf.XamlExtensions.KeyboardNavigation.IsFocusVisualVisibleProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.XamlExtensions.KeyboardNavigation.IsFocusVisualVisible" /> dependency property
            <p /><c>[NotNull]</c></summary>
        </member>
        <member name="T:TomsToolbox.Wpf.XamlExtensions.Polyline">
            <summary>
            Extensions to properly display a <see cref="T:System.Windows.Shapes.Polyline" /> in the coordinates of the containing canvas.
            It normalizes the points and aligns the polyline so the coordinates of the points match the coordinates of the canvas.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.XamlExtensions.Polyline.GetDataPoints(System.Windows.DependencyObject)">
            <summary>
            Gets the data points in the canvas coordinates.
            </summary>
            <param name="element">The element.</param>
            <returns>The data points</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.XamlExtensions.Polyline.SetDataPoints(System.Windows.DependencyObject,System.Collections.Generic.ICollection{System.Windows.Point})">
            <summary>
            Sets the data points in the canvas coordinates.
            </summary>
            <param name="element">The element.</param>
            <param name="value">The value.</param>
        </member>
        <member name="F:TomsToolbox.Wpf.XamlExtensions.Polyline.DataPointsProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.XamlExtensions.Polyline.DataPoints" /> attached property
            </summary>
            <AttachedPropertyComments>
            <summary>
            A helper property to normalize the data points and align the <see cref="T:System.Windows.Shapes.Polyline" /> in the containing canvas, so the data
            points match the coordinates of the canvas.
            </summary>
            </AttachedPropertyComments>
        </member>
        <member name="M:TomsToolbox.Wpf.XamlExtensions.Polyline.GetBoundingRect(System.Collections.Generic.ICollection{System.Windows.Point})">
            <summary>
            Gets the bounding rectangle of all points.
            </summary>
            <param name="points">The points.</param>
            <returns>The bounding rectangle.</returns>
        </member>
        <member name="T:TomsToolbox.Wpf.XamlExtensions.Validation">
            <summary>
            Validation XAML extensions.
            </summary>
        </member>
        <member name="M:TomsToolbox.Wpf.XamlExtensions.Validation.GetShowErrorInTooltip(System.Windows.DependencyObject)">
            <summary>
            Gets whether validation errors are shown in the tool tip of the associated control or not.
            </summary>
            <param name="obj">The target control.<p /><c>[NotNull]</c></param>
            <returns><c>true</c>if validation errors are shown in the tool tip of the associated control; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:TomsToolbox.Wpf.XamlExtensions.Validation.SetShowErrorInTooltip(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            Sets whether validation errors are shown in the tool tip of the associated control or not.
            </summary>
            <param name="obj">The target control.<p /><c>[NotNull]</c></param>
            <param name="value">if set to <c>true</c> validation errors are shown in the tool tip of the associated control.</param>
        </member>
        <member name="F:TomsToolbox.Wpf.XamlExtensions.Validation.ShowErrorInTooltipProperty">
            <summary>
            Identifies the <see cref="P:TomsToolbox.Wpf.XamlExtensions.Validation.ShowErrorInTooltip" /> attached property
            <p /><c>[NotNull]</c></summary>
            <AttachedPropertyComments>
            <summary>
            If set to <c>true</c> validation errors are shown in the tooltip of the associated control.
            </summary>
            <remarks>
            Use this as a replacement for <see cref="F:TomsToolbox.Wpf.ResourceKeys.ControlWithValidationErrorToolTipStyle" /> where a neutral base style is not applicable.
            </remarks>
            </AttachedPropertyComments>
        </member>
    </members>
</doc>
